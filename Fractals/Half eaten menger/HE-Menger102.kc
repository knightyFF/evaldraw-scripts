//Header begin////////////////////////////////////////////////////////////////////////////////////
// Simple kaleidoscopic IFS fractal viewer 
// By Abdelaziz Nait Merzouk (knight_aziz@hotmail.com)
// Dec 2008, (the raytracing part) 
// Apr 2010 (fractals part)
// 
// TERMES OF USE
// 1- No Warranty: Use at your own risk.
// 2- You can modify and distribute this file to anyone you wish.
// 3- Keep this header as it is.
//
//Header end//////////////////////////////////////////////////////////////////////////////////////

//F7 shift-F7 to change resolution
//esc to hide this window
//Left shift and mouse tou turn around
//Left ctrl and mouse to move light

static MI=3; //max iterations
static CMI=20;//Colouring max iterations
static bailout=2^10;

//Global variables////////////////////////////////////////////////////////////////////////////////
static testing=0;// Press "D" to see the number of iterations (blue [3rd] component gives the actual iteration number)

// Parameters. hold "1","2"... and drag the mouse
static param1=5;//[1] key: scale
static param2=0;//[2] key: rotation angle about Z axis
static param3=0;//[3] key: rotation angle about Y axis
static param4=0;//[4] key: rotation angle about X axis
static param5=2;//[5] key: Accuracy
static param7=0;//[7] key: Translation X
static param8=0;//[8] key: Translation X
static param9=0;//[9] key: Translation X
static param0=3/5;//[0] key: Tubes size
static time=0;

static bradius;//Size of the bounding sphere

//parameters for the raymarcher
static minStepFactor=0.001;
static errmax=2^-23,maxiter=500;
static errmaxDE=2^-1;//it's relative to min distance required

//Parameter for the rendering
static darkenfactor=0.001;
static lightenCol[3]={0,0,0};//{90,120,190};
static gamma0=1;
static gamma=1;
static lumfactor=3;

//Main////////////////////////////////////////////////////////////////////////////////////////////
//Press {ctrl enter} to recompile and reset parameters to default
(x,y,&r,&g,&b)
{
   static theta=0.3,phi=0.4,Dist=10,focal=10;//view pos params
   static Ltheta=0.2,Lphi=0.55,LDist=15;//Light pos params
   static O[3],L[3],vi[3],vj[3],vk[3],vt[3],O2=0;
   static pos[3]={0,0,0};
   
   static maxreflextions=0,shadows=1;//"S" key to toggle shadows
   static fCol[3]={220,170,70};//surface's color
   static sCol[3]={70,90,100};//environment's base color
   static shininess=0.5,shine=10;//Shininess
   static rfactor=0.6;//Reflexion factor
   static PS;
   
   static dist2obj=1;
   static frm=-1;
   static mx,my,mz;
   
   static eps=2^-26;
   static ieps=2^26;
   
   if (frm<0){
      bradius=1.75;
   }
   if (numframes>frm)
   {
      frm=numframes;
      rxy=0;imax=0;
      dist2obj=0.002;//*min(1,distfield(O[0],O[1],O[2]));
      if (keystat(0x2a)){ //Left Shift
         readmouse(mx,my,mz);
         theta+=mx*dist2obj;
         phi-=my*dist2obj;phi=max(-0.5*pi,min(0.5*pi,phi));
         Dist+=Dist*mz*0.05*dist2obj;dist=max(0,dist);
         interactive=1;
      }  else if (keystat(0x1d)){ //Left Ctrl
         readmouse(mx,my,mz);
         Ltheta+=mx*0.01;
         Lphi-=my*0.01;Lphi=max(-0.5*pi,min(0.5*pi,Lphi));
         LDist+=LDist*mz*0.0005;Ldist=max(0,Ldist);
         interactive=1;
      }  else if (keystat(0x36)){ //Right Shift
         readmouse(mx,my,mz);
         bradius+=mx*0.01;
         bradius=max(1,bradius);
         bradius=min(4,bradius);
         interactive=1;
      }  else if(keystatus[0x02]){//"1"
         readmouse(mx,my,mz);
         param1+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x03]){//"2"
         readmouse(mx,my,mz);
         param2+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x04]){//"3"
         readmouse(mx,my,mz);
         param3+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x05]){//"4"
         readmouse(mx,my,mz);
         param4+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x06]){//"5"
         readmouse(mx,my,mz);
         param5+=mx*0.005;
         interactive=1;
      } else if(keystatus[0x08]){//"7"
         readmouse(mx,my,mz);
         param7+=mx*0.005;
         interactive=1;
      } else if(keystatus[0x09]){//"8"
         readmouse(mx,my,mz);
         param8+=mx*0.005;
         interactive=1;
      } else if(keystatus[0x0a]){//"9"
         readmouse(mx,my,mz);
         param9+=mx*0.005;
         interactive=1;
      } else if(keystatus[0x0b]){//"0"
         readmouse(mx,my,mz);
         param0+=mx*0.005;
         interactive=1;
      } else {readmouse(mx,mx,mx);interactive=0;}
      if(keystatus[0x1f]){keystatus[0x1f]=0;shadows=(shadows+1)%2;}  //"S" for shadows
      if(keystatus[0x20]){keystatus[0x20]=0;testing=(testing+1)%2;}  //"D"
      if(keystatus[0x17]){//"I"
         maxiter+=(keystatus[0x0d]+keystatus[0x4e])*10;
         maxiter-=(keystatus[0x07]+keystatus[0x4a])*10;
         maxiter=max(maxiter,10);maxiter=min(maxiter,1000);
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      } 
  
      if(keystatus[0x12]){//"E"
         errmax*=2^(keystatus[0x0d]+keystatus[0x4e]);
         errmax*=2^-(keystatus[0x07]+keystatus[0x4a]);
         errmax=max(errmax,2^-26);errmax=min(errmax,2^-8);
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      } 

      if(keystatus[0x13]){//"R" for reflexions
         maxreflextions+=(keystatus[0x0d]+keystatus[0x4e]);
         maxreflextions-=(keystatus[0x07]+keystatus[0x4a]);
         maxreflextions=max(maxreflextions,0);level=min(maxreflextions,3);//Not necessary to go beyond 3 reflexions
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      }
           
      O[0]=dist*cos(phi)*cos(theta);
      O[1]=dist*cos(phi)*sin(theta);
      O[2]=dist*sin(phi);
      O2=O[0]*O[0]+O[1]*O[1]+O[2]*O[2];
      L[0]=Ldist*cos(Lphi)*cos(Ltheta);
      L[1]=Ldist*cos(Lphi)*sin(Ltheta);
      L[2]=Ldist*sin(Lphi);
      vk[0]=-cos(phi)*cos(theta);
      vk[1]=-cos(phi)*sin(theta);
      vk[2]=-sin(phi);
      vi[0]=-sin(theta);
      vi[1]= cos(theta);
      vi[2]= 0;
      vj[0]=-sin(phi)*cos(theta);
      vj[1]=-sin(phi)*sin(theta);
      vj[2]=cos(phi);
      vt[0]=focal*vk[0];
      vt[1]=focal*vk[1];
      vt[2]=focal*vk[2];
      PS=param5/(xres*focal);
      
      time=klock();
      O[0]+=pos[0]*vi[0]+pos[1]*vj[0]+pos[2]*vk[0];
      O[1]+=pos[0]*vi[1]+pos[1]*vj[1]+pos[2]*vk[1];
      O[2]+=pos[0]*vi[2]+pos[1]*vj[2]+pos[2]*vk[2];
      
      SetTransmat();
   }
   
   r=0;g=0;b=0;//Initially no light (we will add light as stepping forward)
   
    
   // Ray tracing. No refraction cause it needs recursion. This is difficult in (x,y...) mode because
   //of non safe multithreading (MT): returning multiple values (needed for vectors) implies declaring
   //them as static. Then if you use MT, the threads will try to write the same variables at the
   //same time => snow, interlock...(EDIT: Forget it. Refraction can be done after all!)
   
   //generates ray direction and transforms it from screen to world coordinates
   v0=x*vi[0]+y*vj[0]+vt[0];
   v1=x*vi[1]+y*vj[1]+vt[1];
   v2=x*vi[2]+y*vj[2]+vt[2];
   
   //Normalize it
   d1=1/sqrt(v0*v0+v1*v1+v2*v2);
   v0*=d1;v1*=d1;v2*=d1;

   //ray direction goes through the current screen pixel
   //Ray origin is the eye
   ox=O[0];oy=O[1];oz=O[2];
   vx=v0;vy=v1;vz=v2;//We may need the original ray's origin and direction
   
   dsx=0;dsy=0;dsz=0;//declaration of gradient/normal vector

   riter=maxreflextions+1;//number of iteration. The first is from the eye. next ones are relections
   Lmul=1;
   nohit=1;
   niused=0;//iterations number actually used   
   iterUsedSoFar=0;//for darkening using niused
   
   pixsiz=PS;pminpixsiz=10000;
   
   do{
      //Intersect with bounding volume
      //Bounding sph with radius bradius
      dmin=0;dmax=Dist+2*bRadius;
      if(!ClipBV(ox,oy,oz,vx,vy,vz,&dmin,&dmax)) break;      
      
      //find next intersection
      t=nextd0(ox,oy,oz,vx,vy,vz,dmin,dmax,niused,pixsiz,pminpixsiz);
      
      //for darkening using niused
      iterUsedSoFar+=niused;
      if(testing) goto number;

      if(t>=dmax)  {nohit=1; break;}
      nohit=0;
      
      //shade it
      
      //gradient vector
      x=ox+t*vx;y=oy+t*vy;z=oz+t*vz;
      
      rxy=0;imax=0;
      vs=distfield(x,y,z,imax);
      dsx=ieps*(distfield(x+eps,y,z,imax)-vs);
      dsy=ieps*(distfield(x,y+eps,z,imax)-vs);
      dsz=ieps*(distfield(x,y,z+eps,imax)-vs);
   
      //Fake AO
      AO=trap(x,y,z);
      
      //normalize the gradient vector
      AO1=sqrt(dsx^2+dsy^2+dsz^2); imod=1/AO1;
      dsx*=imod;dsy*=imod;dsz*=imod;
            
      //Normalize incident vector
      imod=1/sqrt(vx*vx+vy*vy+vz*vz);
      vx*=imod;vy*=imod;vz*=imod;
   
      //Light vector
      xl=L[0]-x;yl=L[1]-y;zl=L[2]-z;
      
      //Normalize Light vector
      LLmod=sqrt(xl^2+yl^2+zl^2);
      imod=1/LLmod;
      xl*=imod;yl*=imod;zl*=imod;
      
      // Cosine of the angle between normal & light direction
      nldot=xl*dsx+yl*dsy+zl*dsz;
   
      //Reflection vector. Because normal and incident vectors are already normalized this one also is!
      nv=dsx*vx+dsy*vy+dsz*vz;
      rx=vx-2*nv*dsx;ry=vy-2*nv*dsy;rz=vz-2*nv*dsz;
      rl=rx*xl+ry*yl+rz*zl;// Cosine of the angle between reflection & light directions
      
      //Shadows
      if(shadows)
      if(nldot>2^-20){
         dmin=0; dmax=LLmod; spixsiz=pminpixsiz;
         ClipBV(L[0],L[1],L[2],-xl,-yl,-zl,&dmin,&dmax);
         t=nextd0(L[0],L[1],L[2],-xl,-yl,-zl,dmin,dmax,niused,pminpixsiz/LLmod,pminpixsiz);
         if (abs(t-dmax)<2*pminpixsiz) t=exp(-darkenfactor*niused);else t=0;
         nldot*=t;
         rl*=t;
      }else rl=0;
   
      //Shading calculations
      dj=nldot;dj=max(dj,0);
      rl=max(rl,0);rl=shininess*rl^shine;
      
      //Color
         r1=fCol[0];g1=fCol[1];b1=fCol[2];
         r1=0.6*r1+40*sin(2*pi*AO);
         g1=0.6*g1+40*sin(3*pi*AO);
         b1=0.7*b1+30*sin(1*pi*AO);
         
         rl*=150;
         AO=0.7;
         dj=0.7*dj+0.3*AO;
         k=-0.2*min(0,(vx*dsx+vy*dsy+vz*dsz))*AO;
         r1*=dj;g1*=dj;b1*=dj;
         r1+=rl+k*sCol[0];g1+=rl+k*sCol[1];b1+=rl+k*sCol[2];
         darken=exp(-darkenfactor*iterusedsofar^2);//(maxiter-iterusedsofar)/maxiter;
         r1*=darken;g1*=darken;b1*=darken;
         lighten=1-darken;
         r1+=lightenCol[0]*lighten;
         g1+=lightenCol[1]*lighten;
         b1+=lightenCol[2]*lighten;
      
      r+=Lmul*r1;g+=Lmul*g1;b+=Lmul*b1;//We add this iteration's light contribution
   
      //Next ray direction is the reflection vector
      //Next ray origin is the current intersection with the surface
      ox=x;oy=y;oz=z;
      vx=rx;vy=ry;vz=rz;
      
      lmul*=rfactor;//We multiply by the reflexion coefficient. To do eventually: Fresnel term

      riter--;
      //nohit=1;
   } while(riter);

   if(nohit) {//"sky's" light. To do eventually: cube map
      k=(vz/sqrt(vx*vx+vy*vy+vz*vz)+1.5);
      darken=exp(-darkenfactor*iterusedsofar^2);//(maxiter-iterusedsofar)/maxiter;
      r+=k*Lmul*sCol[0]*darken;
      g+=k*Lmul*sCol[1]*darken;
      b+=k*Lmul*sCol[2]*darken;
      lighten=1-darken;
      r+=lightenCol[0]*lighten;
      g+=lightenCol[1]*lighten;
      b+=lightenCol[2]*lighten;
   }
   //Apply luminosity and gamma
   r=r*lumfactor*1/255;r=(1-exp(-gamma0*r));r=r^gamma*255;
   g=g*lumfactor*1/255;g=(1-exp(-gamma0*g));g=g^gamma*255;
   b=b*lumfactor*1/255;b=(1-exp(-gamma0*b));b=b^gamma*255;
   
   //The end
   return;
   
   //To see iterations number: 
   number:
   r=max(min((t*2-256),256),0);g=max(min((256-t*4),256),0);b=t;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//The computed distance function
distfield(x,y,z,&imax){
   rxy=1;imax=0;
   MengerSponge5(x, y, z,imax)
   //max(sqrt(x*x+y*y+z*z)-(bradius-0.1),SphereSponge3(x, y, z,imax))
   //max(MengerSponge3(x, y, z,imax),SphereSponge3(x, y, z,imax))
   //(max(sqrt(x*x+y*y+z*z)-(bradius-0.1),SphereSponge3(x, y, z)))*param2+(1-param2)*MengerSponge3(x, y, z)
   //((sqrt(x*x+y*y+z*z)-param3^2)*param2+(1-param2)*MengerSponge3(x, y, z))*param4
}
trap(x,y,z){
   1
}
//////////////////////////////////////////////////////////////////////////////////////////////////
MengerSponge3(x, y, z,&imax) {//by recursively digging a box
   scl=3;mod=2;
   x=x*0.5+0.5;y=y*0.5+0.5;z=z*0.5+0.5;//center it by changing position and scale
   
   xx=abs(x-0.5)-0.5;yy=abs(y-0.5)-0.5;zz=abs(z-0.5)-0.5;
   d1=2*max(xx,max(yy,zz));//distance to the box
   d=d1;//current computed distance
   p=scl;ip=1/scl;k=param2;
   for(m=0; m<MI && ip*k>d; m++) {
      xa = x*p % mod;
      ya = y*p % mod;
      za = z*p % mod;
      
      
      xx=k-abs(2*xa-mod);yy=k-abs(2*ya-mod);zz=k-abs(2*za-mod);
      d1=min(max(xx,zz),min(max(xx,yy),max(yy,zz)))*ip;//distance inside the 3 axis aligned square tubes
      
      d=max(d,d1);//intersection
      
      p*=scl;ip*=1/scl;
   }
   imax=m;
   d
}
//////////////////////////////////////////////////////////////////////////////////////////////////
MengerSponge4(x, y, z,&imax) {//by recursively digging a box
   scl=3;iscl=1/scl;
   
   xx=abs(x)-param7;yy=abs(y)-param7;zz=abs(z)-param7;
   d=max(xx,max(yy,zz));//distance to the box
   
   ip=1;k=param2;
   for(m=0; m<MI && ip*iscl*k>d; m++) {
      
      //tile into (-2,2)^3 cube
      x = ((x+2) % 4)-2;
      y = ((y+2) % 4)-2;
      z = ((z+2) % 4)-2;
      //fold into (-1,1)^3 cube
      x = 2*min(max(-1,x),1)-x;
      y = 2*min(max(-1,y),1)-y;
      z = 2*min(max(-1,z),1)-z;
      
      //dist to carved geometry
      //distance inside the 3 axis aligned square tubes
      xx=k-abs(x);yy=k-abs(y);zz=k-abs(z);
      d1=min(max(xx,zz),min(max(xx,yy),max(yy,zz)));
      d=max(d,d1*ip);//intersection
      
      //transform
      x=x*scl;y=y*scl;z=z*scl;ip*=iscl;
   }
   imax=m;
   d
}
//////////////////////////////////////////////////////////////////////////////////////////////////
static TMat[4][4];
SetTransmat(){
   auto mat[4][4],rmat[4][4];
   idMat(mat);
   rotMatZ(rmat,param2);
   mulMatMat(mat,rmat,mat);
   rotMatY(rmat,param3);
   mulMatMat(mat,rmat,mat);
   rotMatX(rmat,param4);
   mulMatMat(mat,rmat,mat);
   auto tr[3];
   tr[0]=param7;tr[1]=param8;tr[2]=param9;
   transmat(tr,rmat,1);
   mulMatMat(mat,rmat,mat);
   idMat(rmat);
   rmat[0][0]=param1;rmat[1][1]=param1;rmat[2][2]=param1;
   mulMatMat(mat,rmat,mat);
   copyMat(mat,TMat);
}
//////////////////////////////////////////////////////////////////////////////////////////////////
MengerSponge5(x, y, z,&imax) {//by recursively digging a box
   scl=param1;iscl=1/scl;
   
   xx=abs(x)-1;yy=abs(y)-1;zz=abs(z)-1;
   d=max(xx,max(yy,zz));//distance to the box
   
   ip=1;k=param0;
   for(m=0; m<MI && ip*iscl*k>d; m++) {
      
      //tile into (-2,2)^3 cube
      x = ((x+2) % 4)-2;
      y = ((y+2) % 4)-2;
      z = ((z+2) % 4)-2;
      //fold into (-1,1)^3 cube
      x = 2*min(max(-1,x),1)-x;
      y = 2*min(max(-1,y),1)-y;
      z = 2*min(max(-1,z),1)-z;
      
      //dist to carved geometry
      //distance inside the 3 axis aligned square tubes
      xx=k-abs(x);yy=k-abs(y);zz=k-abs(z);
      d1=min(max(xx,zz),min(max(xx,yy),max(yy,zz)));
      d=max(d,d1*ip);//intersection
      
      //transform
      //x=x*scl;y=y*scl;z=z*scl;
      xx=TMat[0][0]*x+TMat[0][1]*y+TMat[0][2]*z+TMat[0][3];
      yy=TMat[1][0]*x+TMat[1][1]*y+TMat[1][2]*z+TMat[1][3];
      zz=TMat[2][0]*x+TMat[2][1]*y+TMat[2][2]*z+TMat[2][3];
      x=xx;y=yy;z=zz;
      ip*=iscl;
   }
   imax=m;
   d
}
//////////////////////////////////////////////////////////////////////////////////////////////////
SphereSponge3(x, y, z,&imax) {//by recursively digging space
   //Same as for the Menger sponge but with spheres
   x+=1;y+=1;z+=1;
   intrad=param1;
   scl=3;iscl=1/3;mod=param4;
   a=x;b=y;c=z;k=param3;ik=1/k;
   d=-100;
   for (L = 0; L < MI && intrad*ik>d; L++)
   {
     xx = a * k % mod - 0.5*mod;
     yy = b * k % mod - 0.5*mod;
     zz = c * k % mod - 0.5*mod;
     r2=xx*xx + yy*yy + zz*zz;
     d1=(intrad-sqrt(r2))/k;
     d=max(d,d1);
     
     k *= scl; ik*=iscl;
   }
   imax=L;
   d
}
//////////////////////////////////////////////////////////////////////////////////////////////////
nextd0(ox,oy,oz,vx,vy,vz,tmin,tmax,&niused,pixsiz,&pminpixsiz){
   d=10000;
   rxy=0;imax=0;
   niused=0;
   i=0;imax=0;ii=0;
   t=tmin;dmin=d;
   for(i=0;i<maxiter && t<tmax && d>errmaxDE*pixsiz*t;i++){
      d=distfield(ox+t*vx,oy+t*vy,oz+t*vz,imax)-t*pixsiz;
      dmin=min(d,dmin);
      ii+=imax;
      t+=d;
   }
   niused=i;
   pminpixsiz=distfield(ox+t*vx,oy+t*vy,oz+t*vz,imax);
   if(testing) return i;
   return t;
}

ClipBV(ox,oy,oz,vx,vy,vz,&dmin,&dmax){
   bp=vx*Ox+vy*Oy+vz*Oz;
   oo=ox*ox+oy*oy+oz*oz;
   c=oo-bradius*bradius;
   Sd=bp*bp-c;//Delta
   if (Sd<0) return 0;
   Sd=sqrt(Sd);
   dmin=max(dmin,-bp-Sd);dmax=min(dmax,-bp+Sd);
   1
}
//Exit from the bounding volume. used for secondary rays
// We only need dmax and we are inside the box so dmin is 0
NextExit(o0,o1,o2,v0,v1,v2){
   //intersect with bounding sph with radius bradius
      bp=v0*O0+v1*O1+v2*O2;oo=o0^2+o1^2+o2^2;
      c=OO-bradius*bradius;
      Sd=bp*bp-c;//Delta
      if (Sd<0) return 0;
      Sd=sqrt(Sd);
      dmax=-bp+Sd;
   dmax
}
//////////////////////////////////////////////////////////////////////////////

zeroVec(vec[4]){
   for(i=0;i<4;i++) vec[i]=0;
}
negVec(vec1[4],vec[4]){
   for(i=0;i<4;i++) vec[i]=-vec1[i];
}
copyVec(vec1[4],vec[4]){
   for(i=0;i<4;i++) vec[i]=vec1[i];
}
zeroMat(mat[4][4]){
   for(l=0;l<4;l++)
      for(c=0;c<4;c++)mat[l][c]=0;
}
idMat(mat[4][4]){
   zeroMat(mat);
   for(i=0;i<4;i++)mat[i][i]=1;
}
transMat(trans[3],mat[4][4],s){
   idMat(mat);
   for(i=0;i<3;i++) mat[i][3]=s*trans[i];
}
rotMatX(mat[4][4],angle){
   idMat(mat);
   s=sin(angle);c=cos(angle);
   mat[1][1]=c;mat[1][2]=-s;
   mat[2][1]=s;mat[2][2]=c;
}
rotMatY(mat[4][4],angle){
   idMat(mat);
   s=sin(angle);c=cos(angle);
   mat[0][0]=c;mat[0][2]=s;
   mat[2][0]=-s;mat[2][2]=c;
}
rotMatZ(mat[4][4],angle){
   idMat(mat);
   s=sin(angle);c=cos(angle);
   mat[0][0]=c;mat[0][1]=-s;
   mat[1][0]=s;mat[1][1]=c;
}
copyMat(matsrc[4][4],matdest[4][4]){
   for(l=0;l<4;l++)
      for(c=0;c<4;c++)matdest[l][c]=matsrc[l][c];
}
mulMatMat(mat1[4][4],mat2[4][4],mat[4][4]){
   auto mattmp[4][4];
   zeroMat(mattmp);
   for(l=0;l<4;l++)
      for(c=0;c<4;c++)
         for(k=0;k<4;k++) mattmp[l][c]+=mat1[l][k]*mat2[k][c];
   copyMat(mattmp,mat);
}
mulMatVec(mat[4][4],vec1[4],vec[4]){
   auto vectmp[4];
   zeroVec(vectmp);
   for(l=0;l<4;l++)
      for(c=0;c<4;c++) vectmp[l]+=mat[l][c]*vec1[c];
   copyVec(vectmp,vec);
}
mulVecMat(vec1[4],mat[4][4],vec[4]){
   auto vectmp[4];
   zeroVec(vectmp);
   for(c=0;c<4;c++)
      for(l=0;l<4;l++) vectmp[c]+=vec1[l]*mat[l][c];
   copyVec(vectmp,vec);
}