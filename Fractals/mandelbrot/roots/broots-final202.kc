/*---Header-------------------------------------------------------------------

-DISCLAMER: This is provided in an as is basis: No warranty of any kind ;o)---

-LICENCE: Public domain.

-DATE:05-24-2013. last update: 05-29-2013.

-DESCRIPTION: 
 Mandelbrot polynomial zeros finder. by Nait-Merzouk Abdelaziz, A.K.A. Knighty.
 This script finds the roots of the nth iterate of the mandelbrot polynomial:
 f_c(z)=z^2+c.
 This is achieved by using a divide and conquere algorithms and some kind of
interval arithmetics. Ok! one can use regular IA to do the job but the
approximation I use just do the job even if it is slightly err... inexact.
 Result for 21 iterations --> 2^20 roots --> 1048576 roots in approximately 20mn. (and about 1 hour on a very old Pentium 4)
 A standalone application with multithreading should be much faster.

-USAGE:
 *Download evaldraw at http://advsys.net/ken/download.htm.
 *Launch evaldraw.
 *Press ESC key and choose File->load. (Or Ctrl-l)
 *Load this script.
 *Press F2 to display the script window.
 *Change the value of MAX_ITERATIONS_NUMBER to the number of iterations you want.
  Caution: This won't work for more than 21 or 22 iteration. I don't know what 
  would happen.
 *Wait. The dots are just to say that it's still working. BTW, evaldraw suspends
  computations while it's window is in backgroud or when minimized. It's a bit
  annoying, but you need to let it in the forground in order to it finish the work.
  You can change this behaviour by editing evaldraw.ini : Change the alwaysactive
  variable to 1.
 *When done, the eleapsed time, the number of roots found and the fiew first ones
  are displayed.
 *Press F6 and choose a filename and locations to store the results.
 *Done. 
 
-TODO:
 *Try regular IA.
 *Done:Add a refine stage using Newton method: 1 or 2 iterations would be enough.
 *Improve the subdivision method: If done carfully, one can improve the attainable precision.
 *One can easily modify this script to get the roots from 0 to maxiter in one run.
 *Of course, complex rootes always come in conjugate pairs. One can take
  advantage of this fact in order to reduce computation time. 
------------------------------------------------------------------Header end*/

//Some constants and arrays
#define MAX_ITERATIONS_NUMBER 11 //should be between 1 and 22
enum {maxstack=2^22, solTabSiz=2^22};//Precision is actually 2^45. The refine stage will give more significant digits.
                                                             //Note: the required accuracy is related to tha value of MAX_ITERATIONS_NUMBER
                                                             //     therefore double type would be insufficient when Max iteration is more than 13 or so.
static eps=2^-(2*MAX_ITERATIONS_NUMBER-2);//, epsmult=2^1;
static stack[maxstack][4];//the stack: Yes it's size is just too exagerated :P.
static sol[solTabSiz][4];//Array to store the roots.
static stackIndex=0, solindex=0;//indices in the stacks and roots array.
static klc=0;//for computing the time it takes.

(){//main()
   if(numframes==0){//1st frame: do the computations and store them
      cls(0);
      klc=klock();
      solve(MAX_ITERATIONS_NUMBER);//The argument is the number of iterations
      //refineThem(MAX_ITERATIONS_NUMBER);
      solindex=clean(0,solindex);//Clean the results from solve()
      //refineThem(MAX_ITERATIONS_NUMBER);
      //solindex=clean(0,solindex);
      quicksortx (0,solindex);//Sort them
      klc=klock()-klc;
   }
//at eache frame, print some statistics and the roots found.
//Press F6 to store them in a text file.
#if 1
   cls(0);
   printf("\nDone. Press F6 to save the result.\n"); 
   fprintf("Iterations:\t%4.0f.\ntime:\t%14.2f s.\nnumber of roots found:\t%10.0f.\n\n",MAX_ITERATIONS_NUMBER,klc,solindex);
   for(i=0;i<solindex;i++) fprintf("%+2.16f\t%+2.16f\n",sol[i][0],sol[i][1]);
   //Drawthem();
#endif
}
//Stack functions
push(x,y,hw){
   if(stackIndex<maxstack){
      stack[stackIndex][0]=x;
      stack[stackIndex][1]=y;
      stack[stackIndex][2]=hw;
      stackIndex+=1;
      return 1;
   }
   0//else error!
}
pop(&x,&y,&hw){
   if(stackIndex>0){
      stackIndex-=1;
      x=stack[stackIndex][0];
      y=stack[stackIndex][1];
      hw=stack[stackIndex][2];
      return 1;
   }
   0//else error!
}

//function to store the roots
store(x,y,hw){
#if 1
   if(solindex>0){//check if the current root found is the same as the previous root
      ax=sol[solindex-1][0];
      ay=sol[solindex-1][1];
      ahw=sol[solindex-1][2];
      if(max(abs(ax-x),abs(ay-y))/max(abs(x),abs(y))<=2^-54) return 2;
   }
#endif
   if(solindex<solTabSiz){
      sol[solindex][0]=x;
      sol[solindex][1]=y;
      sol[solindex][2]=hw;
      solindex+=1;
      return 1;
   }
   0//else error!
}

//divide function: divides the current square area into n x n areas.
//This could be done more carefully in order to avoid the "drift" of the
//centers of the subdivided areas because of rounding errors.
//Thats why I use epsmult in the previous function and in the clean() function.
subdiv(x,y,hw,n,maxiter){
   hwn=hw/n;
   for(j=0;j<n;j++){
      yn=y-hwn*(n-2*j-1);
      for(i=0;i<n;i++){
         xn=x-hwn*(n-2*i-1);
         r=mandel(xn,yn,maxiter,hwn*1.5);//Any root in the area?
         if(r==1)//there is probably one or more roots->subdivide
            push(xn,yn,hwn);
         else if(r==2) {//there is only one root and it's safe to use newton method
            //printf("|");
            Newton(xn,yn,maxiter);
            store(xn,yn,hwn);
         }
      }
   }
}

solve(maxiter){//The core
   //1st subdivision is fine
   push(0,0,2);//push(-1,1,1);//subdiv(0,0,2,2,maxiter);//here the first area is centerd at 0,0 and is 4 units wide.
   auto x,y,hw;
   i=0;j=0;
   while(pop(x,y,hw)){
      if(hw<eps){//epsilon attained.
         {
            Newton(x,y,maxiter);
            store(x,y,hw);
         }
      }
      else subdiv(x,y,hw,2,maxiter);
      i++;
      //just to be sure it's still working
      if(i==200000){printf(".");i=0;j++;}
      if(j==80){printf("\n");j=0;}
      if(solindex==solTabSiz){//shouldn't happen.
         printf("Cleaning!");
         solindex1=clean(0,solindex);
         if(solindex==solindex1) return;
         solindex=solindex1;
      }
   }
}

//return if there is a root for iteration "maxiter" in the disc centered at cx,cy and radius rr0
mandel(cx,cy,maxiter,rt){
   x=cx; y=cy; r=sqrt(x*x+y*y);
   dx=1; dy=0; dr=1;
   
   rn=0; drn=0;
   rr2=(dr+rn*rt)*rt;
   
   i=maxiter-1;
   while(i>0 && r-rr2<2){
      
      rn1=dr*dr+(2*r+(2*dr+rn*rt)*rt)*rn;
      drn1=2*(r*drn+dr*rn+((dr*drn+rn*rn)+rn*drn*rt)*rt);
      rn=rn1; drn=drn1;
      
      dxx=2*(dx*x-dy*y)+1;
      dy=2*(dx*y+dy*x);dx=dxx;
      
      xx=x*x-y*y+cx;
      yy=2*x*y+cy;
      x=xx;y=yy;
      i--;

      r=sqrt(x*x+y*y);
      dr=sqrt(dx^2+dy^2);
      rr2=(dr+rn*rt)*rt;
   }
   drr2=(2*rn+drn*rt)*rt;
   if(r-rr2<=0) {
      if(2*rt*(dr-1*drr2)>(r+rr2)) return 2;//use newton
      return 1;//subdiv
   }
   0//no root
}
//Clean the results because the solve function may report a root up to 4 times (in principle, it could be more)
//Should be a K-NN like algo. This one just works.
clean(i0,i1){
   quicksortx(i0,i1);
   i=i0;j=i0+1;
   while(j<i1){
      if(max(abs(sol[j][0]-sol[i][0]),abs(sol[j][1]-sol[i][1]))<eps) j++;
      else {
         i++;
         sol[i][0]=sol[j][0];
         sol[i][1]=sol[j][1];
         sol[i][2]=sol[j][2];
         j++;
      }
   }
   i1=i+1;
   quicksorty(i0,i1);
   i=i0;j=i0+1;
   while(j<i1){
      if(max(abs(sol[j][0]-sol[i][0]),abs(sol[j][1]-sol[i][1]))<eps) j++;
      else {
         i++;
         sol[i][0]=sol[j][0];
         sol[i][1]=sol[j][1];
         sol[i][2]=sol[j][2];
         j++;
      }
   }
   i1=i+1;
}

quicksortx (i0,i1)//adapted from sorttest.kc
{
   if (i1-i0 <= 1) return;
   v0 = sol[i0][0]; v1 = sol[i0+1][0]; v2 = sol[i1-1][0]; //v = median of 3 elements
          i = min(v0,v1); if (v2 < i) v = i;
   else { i = v0+v1-i;    if (v2 > i) v = i;
   else                               v = v2; }

   j0 = i0; j1 = i1;
   for(i=i0;i<j1;i++)
   {
      if (sol[i][0] > v) {
         j1--;
         t = sol[j1][0]; sol[j1][0] = sol[i][0]; sol[i][0] = t;
         t = sol[j1][1]; sol[j1][1] = sol[i][1]; sol[i][1] = t;
         i--;
      }
      else if (sol[i][0] < v) {
         t = sol[j0][0]; sol[j0][0] = sol[i][0]; sol[i][0] = t;
         t = sol[j0][1]; sol[j0][1] = sol[i][1]; sol[i][1] = t;
         j0++;
      }
   }
   quicksortx(i0,j0);
   quicksortx(j1,i1);
}

quicksorty (i0,i1)
{
   if (i1-i0 <= 1) return;
   v0 = sol[i0][1]; v1 = sol[i0+1][1]; v2 = sol[i1-1][1]; //v = median of 3 elements
          i = min(v0,v1); if (v2 < i) v = i;
   else { i = v0+v1-i;    if (v2 > i) v = i;
   else                               v = v2; }

   j0 = i0; j1 = i1;
   for(i=i0;i<j1;i++)
   {
      if (sol[i][1] > v) {
         j1--;
         t = sol[j1][0]; sol[j1][0] = sol[i][0]; sol[i][0] = t;
         t = sol[j1][1]; sol[j1][1] = sol[i][1]; sol[i][1] = t;
         i--;
      }
      else if (sol[i][1] < v) {
         t = sol[j0][0]; sol[j0][0] = sol[i][0]; sol[i][0] = t;
         t = sol[j0][1]; sol[j0][1] = sol[i][1]; sol[i][1] = t;
         j0++;
      }
   }
   quicksorty(i0,j0);
   quicksorty(j1,i1);
}

Drawthem(){
   mag=100;
   for(i=0;i<solindex;i++){
      x=sol[i][0]; y=sol[i][1];
      setpix(mag*x+0.5*xres+200,0.5*yres-mag*y);
   }
}
//--------------------------------------------------------------------
mandelN(cx,cy,maxiter,&x,&y,&dx,&dy){
   x=cx;y=cy;
   dx=1;dy=0;
   r2=x*x+y*y;
   i=maxiter-1;
   while(i>0 && r2<4){
      
      dxx=2*(dx*x-dy*y)+1;
      dy=2*(dx*y+dy*x);dx=dxx;
      
      xx=x*x-y*y+cx;
      y=2*x*y+cy;
      x=xx;
      i--;
            
      r2=x*x+y*y;
   }
   0
}
Newton(&cx,&cy,maxiter){
// Note that the magnitude of the derivatives are very big so a little 
//error on the roots gives a rather big error on the evaluation of the polynomial
   auto x,y,dx,dy;
   for(i=0;i<10;i++){//5 iteration is far more than enougth!
      
      mandelN(cx,cy,maxiter,x,y,dx,dy);
      idr2=1/(dx^2+dy^2);
      xx=x*dx+y*dy;
      y=dx*y-x*dy;
      x=xx*idr2; y=y*idr2;
      cx-=x; cy-=y;
      if(sqrt((x*x+y*y)/(cx*cx+cy*cy))<2^-54) break;
   }
}
