//Header begin////////////////////////////////////////////////////////////////////////////////////
// Simple kaleidoscopic IFS fractal viewer 
// By Abdelaziz Nait Merzouk (knight_aziz@hotmail.com)
// Dec 2008, (the raytracing part) 
// Apr 2010 (fractals part)
// 
// TERMES OF USE
// 1- No Warranty: Use at your own risk.
// 2- You can modify and distribute this file to anyone you wish.
// 3- Keep this header as it is.
//
//Header end//////////////////////////////////////////////////////////////////////////////////////

//F7 shift-F7 to change resolution
//esc to hide this window
//Left shift and mouse tou turn around
//Left ctrl and mouse to move light

//Parameters of sierpinski & co
static rotmat[3][3]={1,0,0,0,1,0,0,0,1};
static sscale=2;
#define HALF_SYM1
#define HALF_SYM2
//#define HALF_SYM3
#define PRE_ROTATE
//#define POST_ROTATE

#define TETRA_SYM
//#define MENGER_SYM

//#define USE_INF_NORM

static stc[3]={1,1,1};
static MI=20; //max iterations
static CMI=20;//Colouring max iterations
static bailout=2^10;

//Global variables////////////////////////////////////////////////////////////////////////////////
static testing=0;// Press "D" to see the number of iterations (blue [3rd] component gives the actual iteration number)

// Parameters. hold "1","2"... and drag the mouse
static param1=2;//[1] key: scale
static param2=0;//[2] key: rotation angle about Z axis
static param3=0;//[3] key: rotation angle about Y axis
static param4=0;//[4] key: rotation angle about X axis
static param5=5;//[5] key: Accuracy
static param7=1;//[7] key: Scaling center (these are barycentric coordinates of the point)
static param8=0;//[8] key: Scaling center (basis is [1,0,0];[0,1,0] and [0,1,0] points)
static param9=1;//[9] key: Color speed
static param0=0;//[0] key: Color shift
static time=0;

static bradius;//Size of the bounding sphere

//parameters for the raymarcher
//static minStepFactor=0.001;
static errmax=2^-10,maxiter=200;
static eps=2^-36, ieps=2^36;

//Parameter for the rendering
static darkenfactor=0.0005;
static lightenCol[3]={0,0,0};//{90,120,190};
static gamma0=1;
static gamma=1;
static lumfactor=3;

//Main////////////////////////////////////////////////////////////////////////////////////////////
//Press {ctrl enter} to recompile and reset parameters to default
(x,y,&r,&g,&b)
{
   static theta=0.25*pi,phi=0.2*pi,Dist=10,focal=10;//view pos params
   static Ltheta=0.2,Lphi=0.55,LDist=15;//Light pos params
   static O[3],L[3],vi[3],vj[3],vk[3],vt[3],O2=0;
   static pos[3]={0,0,0};
   
   static maxreflextions=0,shadows=1;//"S" key to toggle shadows
   static fCol[3]={220,170,70};//surface's color
   static sCol[3]={30,40,50};//environment's base color
   static shininess=0.5,shine=10;//Shininess
   static rfactor=0.3;//Reflexion factor
   static PS;
   
   static dist2obj=1;
   static frm=-1;
   static mx,my,mz;
   
   if (frm<0){
      bradius=1.05;
#ifdef MENGER_SYM
      param7=1/3;param8=1/3;
#else
#ifdef TETRA_SYM
      param7=1/3;param8=1/3;
#else
      param7=1;param8=0;
#endif
#endif
   }
   if (numframes>frm)
   {
      frm=numframes;
      rxy=0;imax=0;
      dist2obj=0.01*min(1,distfield(O[0],O[1],O[2]));
      if (keystat(0x2a)){ //Left Shift
         readmouse(mx,my,mz);
         theta+=mx*dist2obj;
         phi-=my*dist2obj;phi=max(-0.5*pi,min(0.5*pi,phi));
         Dist+=Dist*mz*0.05*dist2obj;dist=max(0,dist);
         interactive=1;
      }  else if (keystat(0x1d)){ //Left Ctrl
         readmouse(mx,my,mz);
         Ltheta+=mx*0.01;
         Lphi-=my*0.01;Lphi=max(-0.5*pi,min(0.5*pi,Lphi));
         LDist+=LDist*mz*0.0005;Ldist=max(0,Ldist);
         interactive=1;
      }  else if (keystat(0x36)){ //Right Shift
         readmouse(mx,my,mz);
         bradius+=mx*0.01;
         bradius=max(1,bradius);
         bradius=min(4,bradius);
         interactive=1;
      }  else if(keystatus[0x02]){//"1"
         readmouse(mx,my,mz);
         param1+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x03]){//"2"
         readmouse(mx,my,mz);
         param2+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x04]){//"3"
         readmouse(mx,my,mz);
         param3+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x05]){//"4"
         readmouse(mx,my,mz);
         param4+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x06]){//"5"
         readmouse(mx,my,mz);
         param5+=mx*0.005;
         interactive=1;
      } else if(keystatus[0x08]){//"7"
         readmouse(mx,my,mz);
         param7+=mx*0.005;
         interactive=1;
      } else if(keystatus[0x09]){//"8"
         readmouse(mx,my,mz);
         param8+=mx*0.005;
         interactive=1;
      } else if(keystatus[0x0a]){//"9"
         readmouse(mx,my,mz);
         param9+=mx*0.005;
         interactive=1;
      } else if(keystatus[0x0b]){//"0"
         readmouse(mx,my,mz);
         param0+=mx*0.005;
         interactive=1;
      } else {readmouse(mx,mx,mx);interactive=0;}
      if(keystatus[0x1f]){keystatus[0x1f]=0;shadows=(shadows+1)%2;}  //"S" for shadows
      if(keystatus[0x20]){keystatus[0x20]=0;testing=(testing+1)%2;}  //"D"
      if(keystatus[0x17]){//"I"
         maxiter+=(keystatus[0x0d]+keystatus[0x4e])*10;
         maxiter-=(keystatus[0x07]+keystatus[0x4a])*10;
         maxiter=max(maxiter,10);maxiter=min(maxiter,1000);
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      } 
  
      if(keystatus[0x12]){//"E"
         errmax*=2^(keystatus[0x0d]+keystatus[0x4e]);
         errmax*=2^-(keystatus[0x07]+keystatus[0x4a]);
         errmax=max(errmax,2^-26);errmax=min(errmax,2^-8);
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      } 

      if(keystatus[0x13]){//"R" for reflexions
         maxreflextions+=(keystatus[0x0d]+keystatus[0x4e]);
         maxreflextions-=(keystatus[0x07]+keystatus[0x4a]);
         maxreflextions=max(maxreflextions,0);level=min(maxreflextions,3);//Not necessary to go beyond 3 reflexions
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      }
           
      O[0]=dist*cos(phi)*cos(theta);
      O[1]=dist*cos(phi)*sin(theta);
      O[2]=dist*sin(phi);
      O2=O[0]*O[0]+O[1]*O[1]+O[2]*O[2];
      L[0]=Ldist*cos(Lphi)*cos(Ltheta);
      L[1]=Ldist*cos(Lphi)*sin(Ltheta);
      L[2]=Ldist*sin(Lphi);
      vk[0]=-cos(phi)*cos(theta);
      vk[1]=-cos(phi)*sin(theta);
      vk[2]=-sin(phi);
      vi[0]=-sin(theta);
      vi[1]= cos(theta);
      vi[2]= 0;
      vj[0]=-sin(phi)*cos(theta);
      vj[1]=-sin(phi)*sin(theta);
      vj[2]=cos(phi);
      vt[0]=focal*vk[0];
      vt[1]=focal*vk[1];
      vt[2]=focal*vk[2];
      PS=param5/(xres*focal);
      
      time=klock();
      O[0]+=pos[0]*vi[0]+pos[1]*vj[0]+pos[2]*vk[0];
      O[1]+=pos[0]*vi[1]+pos[1]*vj[1]+pos[2]*vk[1];
      O[2]+=pos[0]*vi[2]+pos[1]*vj[2]+pos[2]*vk[2];
      
      sscale=param1;
      salpha=param2;sbeta=param3;stheta=param4;
      s1=sin(sbeta);c1=cos(sbeta);
      s2=sin(stheta);c2=cos(stheta);
      s3=sin(salpha);c3=cos(salpha);
      rotmat[0][0]=c1*c3+s1*s2*s3;rotmat[0][1]=c2*s3;rotmat[0][2]=c1*s2*s3-c3*s1;
      rotmat[1][0]=c3*s1*s2-c1*s3;rotmat[1][1]=c2*c3;rotmat[1][2]=s1*s3+c1*c3*s2;
      rotmat[2][0]=c2*s1;rotmat[2][1]=-s2;rotmat[2][2]=c1*c2;

      stc[0]=param7;stc[1]=param8;stc[2]=1-(stc[0]+stc[1]);
      s1=stc[0]^2+stc[1]^2+stc[2]^2;
      s1=1/sqrt(s1);
      stc[0]*=s1;stc[1]*=s1;stc[2]*=s1;
   }
   
   r=0;g=0;b=0;//Initially no light (we will add light as stepping forward)
   
    
   // Ray tracing. No refraction cause it needs recursion. This is difficult in (x,y...) mode because
   //of non safe multithreading (MT): returning multiple values (needed for vectors) implies declaring
   //them as static. Then if you use MT, the threads will try to write the same variables at the
   //same time => snow, interlock...(EDIT: Forget it. Refraction can be done after all!)
   
   //generates ray direction and transforms it from screen to world coordinates
   v0=x*vi[0]+y*vj[0]+vt[0];
   v1=x*vi[1]+y*vj[1]+vt[1];
   v2=x*vi[2]+y*vj[2]+vt[2];
   
   //Normalize it
   d1=1/sqrt(v0*v0+v1*v1+v2*v2);
   v0*=d1;v1*=d1;v2*=d1;

   //ray direction goes through the current screen pixel
   //Ray origin is the eye
   ox=O[0];oy=O[1];oz=O[2];
   vx=v0;vy=v1;vz=v2;//We may need the original ray's origin and direction
   
   dsx=0;dsy=0;dsz=0;//declaration of gradient/normal vector

   riter=maxreflextions+1;//number of iteration. The first is from the eye. next ones are relections
   Lmul=1;
   nohit=1;
   niused=0;//iterations number actually used   
   iterUsedSoFar=0;//for darkening using niused
   
   pixsiz=PS;pminpixsiz=10000;
   
   do{
      //Intersect with bounding volume
      //Bounding sph with radius bradius
      dmin=0;dmax=Dist+2*bRadius;
      if(!ClipBV(ox,oy,oz,vx,vy,vz,&dmin,&dmax)) break;      
      
      //find next intersection
      t=nextd0(ox,oy,oz,vx,vy,vz,dmin,dmax,niused,pixsiz,pminpixsiz);
      
      //for darkening using niused
      iterUsedSoFar+=niused;
      
      if(testing) goto number;

      if(!testing && t>=dmax)  {nohit=1; break;}
      
      nohit=0;
      
      //shade it
      
      //gradient vector
      x=ox+t*vx;y=oy+t*vy;z=oz+t*vz;
      
      //rxy=0;imax=0;
      vs=distfield(x,y,z);
      evs=max(eps,0.5*vs);ievs=1/evs;
      dsx=ievs*(distfield(x+evs,y,z)-vs);//dsx=ievs*(distfield(x+evs,y,z)-distfield(x-evs,y,z));//
      dsy=ievs*(distfield(x,y+evs,z)-vs);//dsy=ievs*(distfield(x,y+evs,z)-distfield(x,y-evs,z));//
      dsz=ievs*(distfield(x,y,z+evs)-vs);//dsz=ievs*(distfield(x,y,z+evs)-distfield(x,y,z-evs));//
   
      //Fake AO
      AO=trap(x,y,z);
      
      //normalize the gradient vector
      AO1=sqrt(dsx^2+dsy^2+dsz^2); imod=1/AO1;
      dsx*=imod;dsy*=imod;dsz*=imod;
            
      //Normalize incident vector
      imod=1/sqrt(vx*vx+vy*vy+vz*vz);
      vx*=imod;vy*=imod;vz*=imod;
   
      //Light vector
      xl=L[0]-x;yl=L[1]-y;zl=L[2]-z;
      
      //Normalize Light vector
      LLmod=sqrt(xl^2+yl^2+zl^2);
      imod=1/LLmod;
      xl*=imod;yl*=imod;zl*=imod;
      
      // Cosine of the angle between normal & light direction
      nldot=xl*dsx+yl*dsy+zl*dsz;
   
      //Reflection vector. Because normal and incident vectors are already normalized this one also is!
      nv=dsx*vx+dsy*vy+dsz*vz;
      rx=vx-2*nv*dsx;ry=vy-2*nv*dsy;rz=vz-2*nv*dsz;
      rl=rx*xl+ry*yl+rz*zl;// Cosine of the angle between reflection & light directions
      
      //Shadows
      if(shadows)
      if(nldot>2^-20){
         dmin=pminpixsiz; dmax=LLmod;
         ClipBV(x,y,z,xl,yl,zl,&dmin,&dmax);
         t=nextd0(x,y,z,xl,yl,zl,dmin+vs,dmax,niused,pminpixsiz/LLmod,pminpixsiz);
         if (t>dmax) t=exp(-darkenfactor*niused);else t=0;
         nldot*=t;
         rl*=t;
      }else rl=0;
   
      //Shading calculations
      dj=nldot;dj=max(dj,0);
      rl=max(rl,0);rl=shininess*rl^shine;
      
      //Color
         r1=fCol[0];g1=fCol[1];b1=fCol[2];
         r1=0.6*r1+40*sin(2*pi*AO);
         g1=0.6*g1+40*sin(3*pi*AO);
         b1=0.7*b1+30*sin(1*pi*AO);
         
         rl*=150;
         AO=0.7;
         dj=0.7*dj+0.3*AO;
         k=-0.2*min(0,(vx*dsx+vy*dsy+vz*dsz))*AO;
         r1*=dj;g1*=dj;b1*=dj;
         r1+=rl+k*sCol[0];g1+=rl+k*sCol[1];b1+=rl+k*sCol[2];
         darken=exp(-darkenfactor*iterusedsofar^2);//(maxiter-iterusedsofar)/maxiter;
         r1*=darken;g1*=darken;b1*=darken;
         lighten=1-darken;
         r1+=lightenCol[0]*lighten;
         g1+=lightenCol[1]*lighten;
         b1+=lightenCol[2]*lighten;
      
      r+=Lmul*r1;g+=Lmul*g1;b+=Lmul*b1;//We add this iteration's light contribution
   
      //Next ray direction is the reflection vector
      //Next ray origin is the current intersection with the surface
      ox=x;oy=y;oz=z;
      vx=rx;vy=ry;vz=rz;
      
      lmul*=rfactor;//We multiply by the reflexion coefficient. To do eventually: Fresnel term

      riter--;
      //nohit=1;
   } while(riter);

   if(nohit) {//"sky's" light. To do eventually: cube map
      k=(vz/sqrt(vx*vx+vy*vy+vz*vz)+1.5);
      darken=exp(-darkenfactor*iterusedsofar^2);//(maxiter-iterusedsofar)/maxiter;
      r+=k*Lmul*sCol[0]*darken;
      g+=k*Lmul*sCol[1]*darken;
      b+=k*Lmul*sCol[2]*darken;
      lighten=1-darken;
      r+=lightenCol[0]*lighten;
      g+=lightenCol[1]*lighten;
      b+=lightenCol[2]*lighten;
   }
   //Apply luminosity and gamma
   r=r*lumfactor*1/255;r=(1-exp(-gamma0*r));r=r^gamma*255;
   g=g*lumfactor*1/255;g=(1-exp(-gamma0*g));g=g^gamma*255;
   b=b*lumfactor*1/255;b=(1-exp(-gamma0*b));b=b^gamma*255;
   
   //The end
   return;
   
   //To see iterations number: 
   number:
   r=max(min((t*2-256),256),0);g=max(min((256-t*4),256),0);b=t;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//The computed distance function
distfield(x,y,z){
   rxy=1;imax=20;
#ifdef PRE_ROTATE
      x1=rotmat[0][0]*x+rotmat[0][1]*y+rotmat[0][2]*z;
      y1=rotmat[1][0]*x+rotmat[1][1]*y+rotmat[1][2]*z;
      z1=rotmat[2][0]*x+rotmat[2][1]*y+rotmat[2][2]*z;
      x=x1;y=y1;z=z1;
#endif
#ifdef TETRA_SYM
   sierpinski3(x,y,z,sscale,rotmat)
#else
#ifdef MENGER_SYM
   menger3(x,y,z,sscale,rotmat)
#else
   octasierpinski3(x,y,z,sscale,rotmat)
#endif
#endif
}
trap(x,y,z){
#ifdef PRE_ROTATE
      x1=rotmat[0][0]*x+rotmat[0][1]*y+rotmat[0][2]*z;
      y1=rotmat[1][0]*x+rotmat[1][1]*y+rotmat[1][2]*z;
      z1=rotmat[2][0]*x+rotmat[2][1]*y+rotmat[2][2]*z;
      x=x1;y=y1;z=z1;
#endif
#ifdef TETRA_SYM   
   sierpinskitrap(x,y,z,sscale,rotmat)*0.1*param9+0.1*param0
#else
#ifdef MENGER_SYM
   mengertrap(x,y,z,sscale,rotmat)*0.1*param9+0.1*param0
#else
   octasierpinskitrap(x,y,z,sscale,rotmat)*0.1*param9+0.1*param0
#endif
#endif
}
//////////////////////////////////////////////////////////////////////////////////////////////////
sierpinski3(x,y,z,scale,rot[3][3]){
#ifdef USE_INF_NORM
   r=max(abs(x),max(abs(y),abs(z)));
#else
   r=x*x+y*y+z*z;
#endif
   for(i=0;i<MI && r<bailout;i++){
#ifdef PRE_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif
#ifdef HALF_SYM1 
      if(x-y<0){x1=y;y=x;x=x1;}
      if(x-z<0){x1=z;z=x;x=x1;}
      if(y-z<0){y1=z;z=y;y=y1;}
#endif   
#ifdef HALF_SYM2  
      if(x+y<0){x1=-y;y=-x;x=x1;}
      if(x+z<0){x1=-z;z=-x;x=x1;}
      if(y+z<0){y1=-z;z=-y;y=y1;}
#endif
#ifdef POST_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif
      x=scale*x-stc[0]*(scale-1);
      y=scale*y-stc[1]*(scale-1);
      z=scale*z-stc[2]*(scale-1);
      
#ifdef USE_INF_NORM
   r=max(abs(x),max(abs(y),abs(z)));
#else
   r=x*x+y*y+z*z;
#endif
   }
#ifdef USE_INF_NORM
      abs(r-max(abs(stc[0]),max(abs(stc[1]),abs(stc[2]))))*abs(scale)^(-i)
#else
      abs(sqrt(r)-1)*abs(scale)^(-i)
#endif
}
//////////////////////////////////////////////////////////////////////////////////////////////////
sierpinskitrap(x,y,z,scale,rot[3][3]){
   r=x*x+y*y+z*z;rmin=r;
   c=0;
   for(i=0;i<CMI;i++){
#ifdef PRE_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif
      
      c1=0;
#ifdef HALF_SYM1      
      if(x-y<0){x1=y;y=x;x=x1;c1+=1;}
      if(x-z<0){x1=z;z=x;x=x1;c1+=1;}
      if(y-z<0){y1=z;z=y;y=y1;c1+=1;}
#endif 
#ifdef HALF_SYM2     
      if(x+y<0){x1=-y;y=-x;x=x1;c1+=1;}
      if(x+z<0){x1=-z;z=-x;x=x1;c1+=1;}
      if(y+z<0){y1=-z;z=-y;y=y1;c1+=1;}
#endif   
      c+=c1*0.5;
#ifdef POST_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif
      x=scale*x-stc[0]*(scale-1);
      y=scale*y-stc[1]*(scale-1);
      z=scale*z-stc[2]*(scale-1);
      
      r=x*x+y*y+z*z;rmin=min(r,rmin);
   }
   sqrt(rmin)//c
}
//////////////////////////////////////////////////////////////////////////////////////////////////
Octasierpinski3(x,y,z,scale,rot[3][3]){
#ifdef USE_INF_NORM
   r=max(abs(x),max(abs(y),abs(z)));
#else
   r=x*x+y*y+z*z;
#endif
   for(i=0;i<MI && r<bailout;i++){
#ifdef PRE_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif
#ifndef HALF_SYM3
#ifdef HALF_SYM2
      x=abs(x);y=abs(y);z=abs(z);
#endif       
#ifdef HALF_SYM1
      if(x-y<0){x1=y;y=x;x=x1;}
      if(x-z<0){x1=z;z=x;x=x1;}
      if(y-z<0){y1=z;z=y;y=y1;}
#endif
#else
      if(x-y<0){x1=y;y=x;x=x1;}
      if(x+y<0){x1=-y;y=-x;x=x1;}
      if(x-z<0){x1=z;z=x;x=x1;}
      if(x+z<0){x1=-z;z=-x;x=x1;}
#endif
#ifdef POST_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif      
      x=scale*x-stc[0]*(scale-1);
      y=scale*y-stc[1]*(scale-1);
      z=scale*z-stc[2]*(scale-1);
      
#ifdef USE_INF_NORM
      r=max(abs(x),max(abs(y),abs(z)));
#else
      r=x*x+y*y+z*z;
#endif
   }
#ifdef USE_INF_NORM
      abs(r-max(abs(stc[0]),max(abs(stc[1]),abs(stc[2]))))*abs(scale)^(-i)
#else
      abs(sqrt(r)-1)*abs(scale)^(-i)
#endif
}
//////////////////////////////////////////////////////////////////////////////////////////////////
octasierpinskitrap(x,y,z,scale,rot[3][3]){
   r=x*x+y*y+z*z;rmin=r;
   c=0;
   for(i=0;i<CMI;i++){
#ifdef PRE_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif   
      c1=0;
#ifndef HALF_SYM3
#ifdef HALF_SYM2
      c1+=0.5*(1-sgn(x));c1+=0.5*(1-sgn(y));c1+=0.5*(1-sgn(z));
      x=abs(x);y=abs(y);z=abs(z);
#endif      
#ifdef HALF_SYM1
      if(x-y<0){x1=y;y=x;x=x1;c1+=1;}
      if(x-z<0){x1=z;z=x;x=x1;c1+=1;}
      if(y-z<0){y1=z;z=y;y=y1;c1+=1;}
#endif
#else
      if(x-y<0){x1=y;y=x;x=x1;c1+=1;}
      if(x+y<0){x1=-y;y=-x;x=x1;c1+=1;}
      if(x-z<0){x1=z;z=x;x=x1;c1+=1;}
      if(x+z<0){x1=-z;z=-x;x=x1;c1+=1;}
#endif
      c+=c1*0.5;
#ifdef POST_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif      
      x=scale*x-stc[0]*(scale-1);
      y=scale*y-stc[1]*(scale-1);
      z=scale*z-stc[2]*(scale-1);
      
      r=x*x+y*y+z*z;rmin=min(r,rmin);
   }
   sqrt(rmin)//c
}
//////////////////////////////////////////////////////////////////////////////////////////////////
Menger3(x,y,z,scale,rot[3][3]){
#ifdef USE_INF_NORM
   r=max(abs(x),max(abs(y),abs(z)));
#else
   r=x*x+y*y+z*z;
#endif
   for(i=0;i<MI && r<bailout;i++){
#ifdef PRE_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif
      //t=-z+1.*stc[2]*(scale-1)/scale;if(t<0) z=z+2*t;
#ifndef HALF_SYM3
#ifdef HALF_SYM2
      x=abs(x);
      y=abs(y);
      z=abs(z);
#endif       
#ifdef HALF_SYM1
      if(x-y<0){x1=y;y=x;x=x1;}
      if(x-z<0){x1=z;z=x;x=x1;}
      if(y-z<0){y1=z;z=y;y=y1;}
#endif
#else
      if(x-y<0){x1=y;y=x;x=x1;}
      if(x+y<0){x1=-y;y=-x;x=x1;}
      if(x-z<0){x1=z;z=x;x=x1;}
      if(x+z<0){x1=-z;z=-x;x=x1;}      
#endif
      
      //z-=0.5*stc[2]*(scale-1)/scale;z=-abs(-z);z+=0.5*stc[2]*(scale-1)/scale;
      t=-z+0.5*stc[2]*(scale-1)/scale;if(t<0) z=z+2*t;
      
#ifdef POST_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif      
           
      x=scale*x-stc[0]*(scale-1);
      y=scale*y-stc[1]*(scale-1);
      z=scale*z;
      
#ifdef USE_INF_NORM
      r=max(abs(x),max(abs(y),abs(z)));
#else
      r=x*x+y*y+z*z;
#endif
   }
#ifdef USE_INF_NORM
      abs(r-max(abs(stc[0]),max(abs(stc[1]),abs(stc[2]))))*abs(scale)^(-i)
#else
      abs(sqrt(r)-1)*abs(scale)^(-i)
#endif
}
//////////////////////////////////////////////////////////////////////////////////////////////////
Mengertrap(x,y,z,scale,rot[3][3]){
   r=x*x+y*y+z*z;c=0;rmin=r;
   for(i=0;i<CMI;i++){
#ifdef PRE_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif   
      c1=0;
#ifndef HALF_SYM3
#ifdef HALF_SYM2
      c1+=0.5*(1-sgn(x));c1+=0.5*(1-sgn(y));c1+=0.5*(1-sgn(z));
      x=abs(x);y=abs(y);z=abs(z);
#endif      
#ifdef HALF_SYM1
      if(x-y<0){x1=y;y=x;x=x1;c1+=1;}
      if(x-z<0){x1=z;z=x;x=x1;c1+=1;}
      if(y-z<0){y1=z;z=y;y=y1;c1+=1;}
#endif
#else
      if(x-y<0){x1=y;y=x;x=x1;c1+=1;}
      if(x+y<0){x1=-y;y=-x;x=x1;c1+=1;}
      if(x-z<0){x1=z;z=x;x=x1;c1+=1;}
      if(x+z<0){x1=-z;z=-x;x=x1;c1+=1;}
#endif
      
      z-=0.5*stc[2]*(scale-1)/scale;
      z=-abs(-z);
      z+=0.5*stc[2]*(scale-1)/scale;

#ifdef POST_ROTATE
      x1=rot[0][0]*x+rot[1][0]*y+rot[2][0]*z;
      y1=rot[0][1]*x+rot[1][1]*y+rot[2][1]*z;
      z1=rot[0][2]*x+rot[1][2]*y+rot[2][2]*z;
      x=x1;y=y1;z=z1;
#endif      
      x=scale*x-stc[0]*(scale-1);
      y=scale*y-stc[1]*(scale-1);
      z=scale*z;
      
      c+=c1*0.5;
      r=x*x+y*y+z*z;rmin=min(r,rmin);
   }
   sqrt(rmin)//c
}
//////////////////////////////////////////////////////////////////////////////////////////////////
nextd0(ox,oy,oz,vx,vy,vz,tmin,tmax,&niused,pixsiz,&pminpixsiz){
   ldist=pixsiz;
   d=10000;
   rxy=0;imax=0;
   niused=0;
   i=0;
   t=tmin;k=1/sqrt(1+ldist^2+2*ldist);//k=1;//k=(1+ldist);//
   for(i=0;i<maxiter && t<tmax && d>max(eps,(errmax)*t);i++){
      d=k*(distfield(ox+t*vx,oy+t*vy,oz+t*vz)-t*ldist);
      t+=d;
   }
   niused=i;
   pminpixsiz=distfield(ox+t*vx,oy+t*vy,oz+t*vz);
   if(testing) return i;//10000*d;
   return t;
}

ClipBV(ox,oy,oz,vx,vy,vz,&dmin,&dmax){
   bp=vx*Ox+vy*Oy+vz*Oz;
   oo=ox*ox+oy*oy+oz*oz;
   c=oo-bradius*bradius;
   Sd=bp*bp-c;//Delta
   if (Sd<0) return 0;
   Sd=sqrt(Sd);
   dmin=max(dmin,-bp-Sd);dmax=min(dmax,-bp+Sd);
   1
}
//Exit from the bounding volume. used for secondary rays
// We only need dmax and we are inside the box so dmin is 0
NextExit(o0,o1,o2,v0,v1,v2){
   //intersect with bounding sph with radius bradius
      bp=v0*O0+v1*O1+v2*O2;oo=o0^2+o1^2+o2^2;
      c=OO-bradius*bradius;
      Sd=bp*bp-c;//Delta
      if (Sd<0) return 0;
      Sd=sqrt(Sd);
      dmax=-bp+Sd;
   dmax
}