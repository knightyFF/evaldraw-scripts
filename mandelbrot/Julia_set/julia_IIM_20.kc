//Julia sets rendering using MIIM
//By Nait-Merzouk Abdelaziz aka. Knighty. january 2019.
//license: free.
//warranty: none.
//Description:
// Uses the good old MIIM with stack and derivative chek
//in order to prune the tree.
// I tried unsuccessfully to get a continuous coloring along the curve.

#define STKSIZ 4096
#define COLOR
static cx=-0.1, cy=.700000;
static mx=-1000,my=-1000;
static ZF=180;
(){
   if(mousx!=mx || mousy!=my){
      mx=mousx; my=mousy;
      cx=(mx-0.5*xres)*0.0025;
      cy=(0.5*yres-my)*0.0025;
      cls(0);
      init();
      x=0; y=0; r=2; a=0; d=0;
      red=0;green=0;blue=0;
      repel(x,y);
      sx = xres * 0.5 + ZF * x;
      sy = yres * 0.5 - ZF * y;
      
      setcol(0xFFFFFF);
      //drawsph(sx,sy,-10);
   
      push(x,y,r,a,d);
      
   }
   n=0;
   while(!isStkEmpty() && n<10000){
      pop(x,y,r,a,d);
      //printnum(d);
      sx = xres * 0.5 + ZF * x;
      sy = yres * 0.5 - ZF * y;
#ifdef COLOR
      sethsvcol(a,1,1);
#endif
      setpix(sx,sy);
      if(d<4000 && r>1e-4){
         x = x - cx; y = y - cy;
         r1 = (x*x+y*y)^0.25;
         a1 = atan2(y,x);
         if(a>=0 ){
            if(y<0 && x<0)
               a1+=2*pi;
         } else {
            if(y>=0 && x<0)
               a1-=2*pi;
         }
         a1*=0.5;
         x = r1 * cos(a1); y = r1 * sin(a1);
         
         r*=0.5/r1;
         
         
         push(x,y,r,a*0.5,d+1);
         if(a>=0) t=-1; else t=1; 
         push(-x,-y,r,a*0.5+t,d+1);
      }
      n++;
   }
}

static stk[STKSIZ][8];
static stkPtr = 0;

init(){
   stkPtr = 0;
}

isStkEmpty(){
   return stkPtr==0;
}

push(x,y,r,a,d){
   //printnum(stkPtr);
   if(stkPtr<STKSIZ){
      stk[stkPtr][0] = x;
      stk[stkPtr][1] = y;
      stk[stkPtr][2] = r;
      stk[stkPtr][3] = a;
      stk[stkPtr][4] = d;
      stkPtr+=1;
   }
   return stkPtr;
}

pop(&x,&y,&r,&a,&d){
   if(stkPtr>0){
      stkPtr-=1;
      x = stk[stkPtr][0];
      y = stk[stkPtr][1];
      r = stk[stkPtr][2];
      a = stk[stkPtr][3];
      d = stk[stkPtr][4];
      
   }
   return stkPtr;
}

//--------------------------------
repel(&x,&y){
   //if(cx==0 && cy==0){x=1; y=0; return;}
   x=1-4*cx; y=-4*cy;
   csqrt(x,y,x,y);
   x=0.5*(1+x); y=0.5*y;
   return;
}
//--------------------------------
csqrt(a,b,&xo,&yo){
   if(b==0){
      if(a>=0)
         {xo=sqrt(a); yo=0;}
      else
         {xo=0; yo=sqrt(-a);}
      return;
   }
   xo=sqrt(a*a+b*b);
   yo=sqrt((xo-a)*0.5);
   xo=sqrt((xo+a)*0.5);
   if (b<0) yo=-yo;
}
//--------------------------------
mix(a,b,f){
   a*(1-f)+b*f
}
clamp(x,mi,ma){
   max(min(x,ma),mi)
}
fract(x){x-floor(x)}
hsv2rgb(h,s,v,&r,&g,&b) {
   r=255*mix(1,clamp((abs(fract(h+1)*6.-3.)-1.),0.,1.),s)*v;
   g=255*mix(1,clamp((abs(fract(h+2/3)*6.-3.)-1.),0.,1.),s)*v;
   b=255*mix(1,clamp((abs(fract(h+1/3)*6.-3.)-1.),0.,1.),s)*v;
}
sethsvcol(h,s,v) {
   r=255*mix(1,clamp((abs(fract(h+1)*6.-3.)-1.),0.,1.),s)*v;
   g=255*mix(1,clamp((abs(fract(h+2/3)*6.-3.)-1.),0.,1.),s)*v;
   b=255*mix(1,clamp((abs(fract(h+1/3)*6.-3.)-1.),0.,1.),s)*v;
   setcol(r,g,b);
}