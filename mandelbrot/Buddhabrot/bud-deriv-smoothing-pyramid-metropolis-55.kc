enum{mapsiz=1024};
static map[mapsiz][mapsiz];
static tex;
static drawmandel=1;
static boxhalfwidth=0.125;
static nbrpts=0;
static brightness=10;
(){
   glEnable(GL_ALPHA_TEST);glDisable(GL_DEPTH_TEST);
   if(numframes==0){
      cls(0x008fff);
      setboxtrap(0.75,0.6,0.15);//setboxtrap(-1.1,-0.75,0.2);//setboxtrap(0,0,2);//
      initbb();
      init_seeds();
   }
   //if(numframes==100) initbb();
   if(keystatus[0x39]){cls(0);keystatus[0x39]=0;}
   if(keystatus[0x1d]){
      init_seeds();
      //for(i=0;i<50;i++) new_generation();
      keystatus[0x1d]=0;
   }
   if(keystatus[0xc8]){brightness*=1.1;keystatus[0xc8]=0;}
   if(keystatus[0xd0]){brightness/=1.1;keystatus[0xd0]=0;}
   
   total=0;inside=0;outside=0;
   
   new_generation();
   seeds_props(total,inside,outside);

   nbrpts+=1000;
   if(numframes%200==199)
   {
      //drawbb(0.00005*mousx/nbrpts,0.002*mousy);
      drawit(0.00005*mousx/nbrpts,0.002*mousy);
      moveto(0,0);setcol(0xffffff);
      //printf("total seeds = %g Mega.\ninside = %g\noutside = %g",nbrpts/1e6,inside,outside);
   }
}  
///////////////////////////////////////////////////////////////////////////////////
enum{mapsizbb=26*32};
static bx0=0,by0=0,bx1=1,by1=1;
static mag=1,zoom=1,zom=1,rx,ry;
setboxtrap(cx,cy,hw){
   x0=cx-hw;y0=cy-hw;
   x1=cx+hw;y1=cy+hw;
   if(x1>x0){bx0=x0;bx1=x1;}else{bx0=x1;bx1=x0;}
   if(y1>y0){by0=y0;by1=y1;}else{by0=y1;by1=y0;}
   mag=sqrt(16/((bx1-bx0)*(by1-by0)));
   zoom=1/hw;
   zom=mapsizbb*0.5/hw;
   rx=mapsizbb/(bx1-bx0);
   ry=mapsizbb/(by1-by0);
}
///////////////////////////////////////////////////////////////////////////////////
static sampleRadiusScaleFactor=1;//values less than 1 give slightly more accurate render
static sampleMinRadius=0.01;//values > 0 give smoother results but wash out deep iterations generated details. a value of 1 meanes a min radius of 0.5 pixel width in param space

static maxiter=128,miniter=100;
static bailoutRad=16,DEbailoutRad=10000;
static accumAfter=5;
mandeliterBT(x,y,&length,&it_length,&it_DE){
   // cardioid and period-2 bulb test
   q = (x-0.25)*(x-0.25) + y*y;
   if (((x+1)*(x+1) + y*y < 0.0625)||(q*(q+(x-0.25)) < 0.25*y*y)){
      length=maxiter+1;
      it_length=maxiter;
      return 0;
   }
   cx=x;cy=y;
   dx=1;dy=0;
   r2=x*x+y*y;
   i=0;
   trapped=0;
   /*while(i<miniter && r2<bailoutRad){
      dxx=2*(x*dx-y*dy)+1;
      dy=2*(x*dy+y*dx);dx=dxx;
      
      xx=x*x-y*y+cx;
      y=2*x*y+cy; x=xx;
      
      r2=x*x+y*y;    
      
      i++;
   }*/
   //if(r2>=bailoutRad) return 0;
   do{
      if(x>=bx0 && y>=by0 && x<bx1 && y<by1 /*&& i>=accumAfter*/) trapped++;
      
      dxx=2*(x*dx-y*dy)+1;
      dy=2*(x*dy+y*dx);dx=dxx;
      
      xx=x*x-y*y+cx;
      y=2*x*y+cy; x=xx;
      
      r2=x*x+y*y;    
      
      i++;
   }while(i<maxiter && r2<bailoutRad);
   
   length=trapped; it_length=i;
   trapped=trapped && i<maxiter && i>miniter;
   if(trapped){//compute distance estimate
      while(r2<DEbailoutRad){
         dxx=2*(x*dx-y*dy)+1;
         dy=2*(x*dy+y*dx);dx=dxx;
         xx=x*x-y*y+cx;
         y=2*x*y+cy; x=xx;
         r2=x*x+y*y;
      }
   }
   r=sqrt(r2); dr=sqrt(dx*dx+dy*dy); it_DE=0.5*r*log(r)/dr; it_DE*=sampleRadiusScaleFactor;
   trapped
}
mandelacc(x,y,length,it_length,it_DE){
   multi=1/(length^0.25);//0.05;//0.1;//1/log(length+1);//
   it_DE=max(sampleMinRadius,2*it_DE*zom);//set sample sizes in screen coordinate and clamp
   cx=x; cy=y; i=0;
   dx=1; dy=0;
   i=0;
   do{
      if(x>=bx0 && y>=by0 && x<bx1 && y<by1 && i>=accumAfter){
         dr=sqrt(dx*dx+dy*dy);
         sbuf(x,y,multi,i,it_length,dr*it_DE);
         //sbuf(x,-y,multi,i,it_length,dr*it_DE);
         //accumulate(x,y,multi,i,it_length);
         //accumulate(x,-y,multi,i,it_length);
      }
      dxx=2*(x*dx-y*dy)+1;
      dy=2*(x*dy+y*dx);dx=dxx;
      xx=x*x-y*y+cx;
      yy=2*x*y+cy;
      x=xx;y=yy;      
      
      r2=x*x+y*y;
      i++;
   }while(i<maxiter && r2<bailoutRad);
}
///////////////////////////////////////////////////////////////////////////////////

static mapbb[mapsizbb][mapsizbb][3];
static mapbb0[mapsizbb][mapsizbb][3];//buffer for the samples wich size is comparable to pixel size (scale 0)
static mapbb1[mapsizbb*0.5][mapsizbb*0.5][3];//scale 1 (pixel size==2)
static mapbb2[mapsizbb*0.25][mapsizbb*0.25][3];
static mapbb3[mapsizbb*0.125][mapsizbb*0.125][3];
static mapbb4[mapsizbb/16][mapsizbb/16][3];
static mapbb5[mapsizbb/32][mapsizbb/32][3];//scale 5 (pixel size==32)

static minr=100,maxr=400;
static ming=40,maxg=200;
static minb=0,maxb=100;

initbb(){
   maxiter=max(maxr,max(maxg,maxb));
   miniter=min(minr,min(ming,minb));
   for(l=0;l<mapsizbb;l++) for(c=0;c<mapsizbb;c++){ mapbb[l][c][0]=0;mapbb[l][c][1]=0;mapbb[l][c][2]=0;}
   for(l=0;l<mapsizbb;l++) for(c=0;c<mapsizbb;c++){ mapbb0[l][c][0]=0;mapbb0[l][c][1]=0;mapbb0[l][c][2]=0;}
   for(l=0;l<mapsizbb*1/2;l++) for(c=0;c<mapsizbb*1/2;c++){ mapbb1[l][c][0]=0;mapbb1[l][c][1]=0;mapbb1[l][c][2]=0;}
   for(l=0;l<mapsizbb*1/4;l++) for(c=0;c<mapsizbb*1/4;c++){ mapbb2[l][c][0]=0;mapbb2[l][c][1]=0;mapbb2[l][c][2]=0;}
   for(l=0;l<mapsizbb*1/8;l++) for(c=0;c<mapsizbb*1/8;c++){ mapbb3[l][c][0]=0;mapbb3[l][c][1]=0;mapbb3[l][c][2]=0;}
   for(l=0;l<mapsizbb*1/16;l++) for(c=0;c<mapsizbb*1/16;c++){ mapbb4[l][c][0]=0;mapbb4[l][c][1]=0;mapbb4[l][c][2]=0;}
   for(l=0;l<mapsizbb*1/32;l++) for(c=0;c<mapsizbb*1/32;c++){ mapbb5[l][c][0]=0;mapbb5[l][c][1]=0;mapbb5[l][c][2]=0;}
}
calcbb(){
}

//use scale pyramid to filter the samples using their sizes
//Not the best implementation: very very big overhead!
getlevel(d){
   level=log(d)*0.5/log(2);
}

sbuf(x,y,weight,itnum,it_length,d){//index->color channel; d->size of the sample.
   if(weight<=0 /*|| numframes<1000*/) return;
   l=getlevel(d);
   
   //if(l<-1) {accumulate(x,y,weight,itnum,it_length);}else 
   if(l<0) {/*w=(l+1);accumulate(x,y,(1-w)*weight,itnum,it_length);*/accumulate0(x,y,(0*w+1)*weight,itnum,it_length);} else 
   if(l<1) {/*w=l;accumulate0(x,y,(1-w)*weight,itnum,it_length);*/accumulate1(x,y,0.25*(0*w+1)*weight,itnum,it_length);} else 
   if(l<2) {/*w=(l-1);accumulate1(x,y,0.25*(1-w)*weight,itnum,it_length);*/accumulate2(x,y,0.25*0.25*(0*w+1)*weight,itnum,it_length);} else 
   if(l<3) {/*w=(l-2);accumulate2(x,y,0.25*0.25*(1-w)*weight,itnum,it_length);*/accumulate3(x,y,0.25*0.25*0.25*(0*w+1)*weight,itnum,it_length);} else 
   if(l<4) {/*w=(l-3);accumulate3(x,y,0.25*0.25*0.25*(1-w)*weight,itnum,it_length);*/accumulate4(x,y,0.25*0.25*0.25*0.25*(0*w+1)*weight,itnum,it_length);} else 
   if(l<5) {/*w=(l-4);accumulate4(x,y,0.25*0.25*0.25*0.25*(1-w)*weight,itnum,it_length);*/accumulate5(x,y,0.25*0.25*0.25*0.25*0.25*(0*w+1)*weight,itnum,it_length);} else 
   if(l>=5) {accumulate5(x,y,0.25*0.25*0.25*0.25*0.25*weight,itnum,it_length);}
}

accumulate(x,y,weight,itnum,it_length){
   sx=(x-bx0)*mapsizbb/(bx1-bx0);
   sy=(y-by0)*mapsizbb/(by1-by0);
   if(sx>=0 && sx<mapsizbb && sy>=0 && sy<mapsizbb){
      if(it_length>minr && it_length<maxr) mapbb[sy][sx][0]+=weight;
      if(it_length>ming && it_length<maxg) mapbb[sy][sx][1]+=weight;
      if(it_length>minb && it_length<maxb) mapbb[sy][sx][2]+=weight;
   }
}

accumulate0(x,y,w,itnum,it_length){
   k=mapsizbb/1;
   sx=(x-bx0)/(bx1-bx0)*k;
   sy=(y-by0)/(by1-by0)*k;
   wx=sx-floor(sx);wy=sy-floor(sy);
   w00=w*(1-wx)*(1-wy); w01=w*wx*(1-wy);
   w10=w*(1-wx)*wy; w11=w*wx*wy;
   condr=it_length>minr && it_length<maxr;
   condg=it_length>ming && it_length<maxg;
   condb=it_length>minb && it_length<maxb;
   if(sx>=0 && sx<k && sy>=0 && sy<k){
      if(condr) mapbb0[sy][sx][0]+=w00;
      if(condg) mapbb0[sy][sx][1]+=w00;
      if(condb) mapbb0[sy][sx][2]+=w00;
   }
   if(sx+1>=0 && sx+1<k && sy>=0 && sy<k){
      if(condr) mapbb0[sy][sx+1][0]+=w01;
      if(condg) mapbb0[sy][sx+1][1]+=w01;
      if(condb) mapbb0[sy][sx+1][2]+=w01;
   }
   if(sx>=0 && sx<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb0[sy+1][sx][0]+=w10;
      if(condg) mapbb0[sy+1][sx][1]+=w10;
      if(condb) mapbb0[sy+1][sx][2]+=w10;
   }
   if(sx+1>=0 && sx+1<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb0[sy+1][sx+1][0]+=w11;
      if(condg) mapbb0[sy+1][sx+1][1]+=w11;
      if(condb) mapbb0[sy+1][sx+1][2]+=w11;
   }
}

accumulate1(x,y,w,itnum,it_length){
   k=mapsizbb/2;
   sx=(x-bx0)/(bx1-bx0)*k;
   sy=(y-by0)/(by1-by0)*k;
   wx=sx-floor(sx);wy=sy-floor(sy);
   w00=w*(1-wx)*(1-wy); w01=w*wx*(1-wy);
   w10=w*(1-wx)*wy; w11=w*wx*wy;
   condr=it_length>minr && it_length<maxr;
   condg=it_length>ming && it_length<maxg;
   condb=it_length>minb && it_length<maxb;
   if(sx>=0 && sx<k && sy>=0 && sy<k){
      if(condr) mapbb1[sy][sx][0]+=w00;
      if(condg) mapbb1[sy][sx][1]+=w00;
      if(condb) mapbb1[sy][sx][2]+=w00;
   }
   if(sx+1>=0 && sx+1<k && sy>=0 && sy<k){
      if(condr) mapbb1[sy][sx+1][0]+=w01;
      if(condg) mapbb1[sy][sx+1][1]+=w01;
      if(condb) mapbb1[sy][sx+1][2]+=w01;
   }
   if(sx>=0 && sx<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb1[sy+1][sx][0]+=w10;
      if(condg) mapbb1[sy+1][sx][1]+=w10;
      if(condb) mapbb1[sy+1][sx][2]+=w10;
   }
   if(sx+1>=0 && sx+1<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb1[sy+1][sx+1][0]+=w11;
      if(condg) mapbb1[sy+1][sx+1][1]+=w11;
      if(condb) mapbb1[sy+1][sx+1][2]+=w11;
   }
}

accumulate2(x,y,w,itnum,it_length){
   k=mapsizbb/4;
   sx=(x-bx0)/(bx1-bx0)*k;
   sy=(y-by0)/(by1-by0)*k;
   wx=sx-floor(sx);wy=sy-floor(sy);
   w00=w*(1-wx)*(1-wy); w01=w*wx*(1-wy);
   w10=w*(1-wx)*wy; w11=w*wx*wy;
   condr=it_length>minr && it_length<maxr;
   condg=it_length>ming && it_length<maxg;
   condb=it_length>minb && it_length<maxb;
   if(sx>=0 && sx<k && sy>=0 && sy<k){
      if(condr) mapbb2[sy][sx][0]+=w00;
      if(condg) mapbb2[sy][sx][1]+=w00;
      if(condb) mapbb2[sy][sx][2]+=w00;
   }
   if(sx+1>=0 && sx+1<k && sy>=0 && sy<k){
      if(condr) mapbb2[sy][sx+1][0]+=w01;
      if(condg) mapbb2[sy][sx+1][1]+=w01;
      if(condb) mapbb2[sy][sx+1][2]+=w01;
   }
   if(sx>=0 && sx<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb2[sy+1][sx][0]+=w10;
      if(condg) mapbb2[sy+1][sx][1]+=w10;
      if(condb) mapbb2[sy+1][sx][2]+=w10;
   }
   if(sx+1>=0 && sx+1<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb2[sy+1][sx+1][0]+=w11;
      if(condg) mapbb2[sy+1][sx+1][1]+=w11;
      if(condb) mapbb2[sy+1][sx+1][2]+=w11;
   }
}

accumulate3(x,y,w,itnum,it_length){
   k=mapsizbb/8;
   sx=(x-bx0)/(bx1-bx0)*k;
   sy=(y-by0)/(by1-by0)*k;
   wx=sx-floor(sx);wy=sy-floor(sy);
   w00=w*(1-wx)*(1-wy); w01=w*wx*(1-wy);
   w10=w*(1-wx)*wy; w11=w*wx*wy;
   condr=it_length>minr && it_length<maxr;
   condg=it_length>ming && it_length<maxg;
   condb=it_length>minb && it_length<maxb;
   if(sx>=0 && sx<k && sy>=0 && sy<k){
      if(condr) mapbb3[sy][sx][0]+=w00;
      if(condg) mapbb3[sy][sx][1]+=w00;
      if(condb) mapbb3[sy][sx][2]+=w00;
   }
   if(sx+1>=0 && sx+1<k && sy>=0 && sy<k){
      if(condr) mapbb3[sy][sx+1][0]+=w01;
      if(condg) mapbb3[sy][sx+1][1]+=w01;
      if(condb) mapbb3[sy][sx+1][2]+=w01;
   }
   if(sx>=0 && sx<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb3[sy+1][sx][0]+=w10;
      if(condg) mapbb3[sy+1][sx][1]+=w10;
      if(condb) mapbb3[sy+1][sx][2]+=w10;
   }
   if(sx+1>=0 && sx+1<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb3[sy+1][sx+1][0]+=w11;
      if(condg) mapbb3[sy+1][sx+1][1]+=w11;
      if(condb) mapbb3[sy+1][sx+1][2]+=w11;
   }
}

accumulate4(x,y,w,itnum,it_length){
   k=mapsizbb/16;
   sx=(x-bx0)/(bx1-bx0)*k;
   sy=(y-by0)/(by1-by0)*k;
   wx=sx-floor(sx);wy=sy-floor(sy);
   w00=w*(1-wx)*(1-wy); w01=w*wx*(1-wy);
   w10=w*(1-wx)*wy; w11=w*wx*wy;
   condr=it_length>minr && it_length<maxr;
   condg=it_length>ming && it_length<maxg;
   condb=it_length>minb && it_length<maxb;
   if(sx>=0 && sx<k && sy>=0 && sy<k){
      if(condr) mapbb4[sy][sx][0]+=w00;
      if(condg) mapbb4[sy][sx][1]+=w00;
      if(condb) mapbb4[sy][sx][2]+=w00;
   }
   if(sx+1>=0 && sx+1<k && sy>=0 && sy<k){
      if(condr) mapbb4[sy][sx+1][0]+=w01;
      if(condg) mapbb4[sy][sx+1][1]+=w01;
      if(condb) mapbb4[sy][sx+1][2]+=w01;
   }
   if(sx>=0 && sx<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb4[sy+1][sx][0]+=w10;
      if(condg) mapbb4[sy+1][sx][1]+=w10;
      if(condb) mapbb4[sy+1][sx][2]+=w10;
   }
   if(sx+1>=0 && sx+1<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb4[sy+1][sx+1][0]+=w11;
      if(condg) mapbb4[sy+1][sx+1][1]+=w11;
      if(condb) mapbb4[sy+1][sx+1][2]+=w11;
   }
}

accumulate5(x,y,w,itnum,it_length){
   k=mapsizbb/32;
   sx=(x-bx0)/(bx1-bx0)*k;
   sy=(y-by0)/(by1-by0)*k;
   wx=sx-floor(sx);wy=sy-floor(sy);
   w00=w*(1-wx)*(1-wy); w01=w*wx*(1-wy);
   w10=w*(1-wx)*wy; w11=w*wx*wy;
   condr=it_length>minr && it_length<maxr;
   condg=it_length>ming && it_length<maxg;
   condb=it_length>minb && it_length<maxb;
   if(sx>=0 && sx<k && sy>=0 && sy<k){
      if(condr) mapbb5[sy][sx][0]+=w00;
      if(condg) mapbb5[sy][sx][1]+=w00;
      if(condb) mapbb5[sy][sx][2]+=w00;
   }
   if(sx+1>=0 && sx+1<k && sy>=0 && sy<k){
      if(condr) mapbb5[sy][sx+1][0]+=w01;
      if(condg) mapbb5[sy][sx+1][1]+=w01;
      if(condb) mapbb5[sy][sx+1][2]+=w01;
   }
   if(sx>=0 && sx<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb5[sy+1][sx][0]+=w10;
      if(condg) mapbb5[sy+1][sx][1]+=w10;
      if(condb) mapbb5[sy+1][sx][2]+=w10;
   }
   if(sx+1>=0 && sx+1<k && sy+1>=0 && sy+1<k){
      if(condr) mapbb5[sy+1][sx+1][0]+=w11;
      if(condg) mapbb5[sy+1][sx+1][1]+=w11;
      if(condb) mapbb5[sy+1][sx+1][2]+=w11;
   }
}

drawbb(bright,expo){
   bright=bright*mapsizbb*mapsizbb*zoom*zoom;
   for(l=0;l<mapsizbb;l++)
      for(c=0;c<mapsizbb;c++){
         r=mapbb[l][c][0]*bright;r=4*(256-256/(r^expo+1));
         g=mapbb[l][c][1]*bright;g=4*(256-256/(g^expo+1));
         b=mapbb[l][c][2]*bright;b=4*(256-256/(b^expo+1));
         setcol(r,g,b);
         setpix(c,l);
      }
}

drawit(bright,expo){
   bright=bright*mapsizbb*mapsizbb*zoom*zoom;
   for(l=0;l<mapsizbb;l++)
      for(c=0;c<mapsizbb;c++){//for each pixel get the final color from the scale pyramid
         r=mapbb[l][c][0]+mapbb0[l][c][0];
         g=mapbb[l][c][1]+mapbb0[l][c][1];
         b=mapbb[l][c][2]+mapbb0[l][c][2];
         
         c0=floor(c*0.5);l0=floor(l*0.5);u=0.5*c-c0;v=0.5*l-l0; c1=min(0.5*mapsizbb-1,c0+1); l1=min(0.5*mapsizbb-1,l0+1);
         r1=mapbb1[l0][c0][0]*(1-u)*(1-v)+mapbb1[l0][c1][0]*u*(1-v)+mapbb1[l1][c0][0]*(1-u)*v+mapbb1[l1][c1][0]*u*v;
         g1=mapbb1[l0][c0][1]*(1-u)*(1-v)+mapbb1[l0][c1][1]*u*(1-v)+mapbb1[l1][c0][1]*(1-u)*v+mapbb1[l1][c1][1]*u*v;
         b1=mapbb1[l0][c0][2]*(1-u)*(1-v)+mapbb1[l0][c1][2]*u*(1-v)+mapbb1[l1][c0][2]*(1-u)*v+mapbb1[l1][c1][2]*u*v;
         
         c0=floor(c*0.25);l0=floor(l*0.25);u=0.25*c-c0;v=0.25*l-l0; c1=min(0.25*mapsizbb-1,c0+1); l1=min(0.25*mapsizbb-1,l0+1);
         r2=mapbb2[l0][c0][0]*(1-u)*(1-v)+mapbb2[l0][c1][0]*u*(1-v)+mapbb2[l1][c0][0]*(1-u)*v+mapbb2[l1][c1][0]*u*v;
         g2=mapbb2[l0][c0][1]*(1-u)*(1-v)+mapbb2[l0][c1][1]*u*(1-v)+mapbb2[l1][c0][1]*(1-u)*v+mapbb2[l1][c1][1]*u*v;
         b2=mapbb2[l0][c0][2]*(1-u)*(1-v)+mapbb2[l0][c1][2]*u*(1-v)+mapbb2[l1][c0][2]*(1-u)*v+mapbb2[l1][c1][2]*u*v;
         
         c0=floor(c*0.125);l0=floor(l*0.125);u=0.125*c-c0;v=0.125*l-l0; c1=min(0.125*mapsizbb-1,c0+1); l1=min(0.125*mapsizbb-1,l0+1);
         r3=mapbb3[l0][c0][0]*(1-u)*(1-v)+mapbb3[l0][c1][0]*u*(1-v)+mapbb3[l1][c0][0]*(1-u)*v+mapbb3[l1][c1][0]*u*v;
         g3=mapbb3[l0][c0][1]*(1-u)*(1-v)+mapbb3[l0][c1][1]*u*(1-v)+mapbb3[l1][c0][1]*(1-u)*v+mapbb3[l1][c1][1]*u*v;
         b3=mapbb3[l0][c0][2]*(1-u)*(1-v)+mapbb3[l0][c1][2]*u*(1-v)+mapbb3[l1][c0][2]*(1-u)*v+mapbb3[l1][c1][2]*u*v;
         
         c0=floor(c*1/16);l0=floor(l*1/16);u=1/16*c-c0;v=1/16*l-l0; c1=min(1/16*mapsizbb-1,c0+1); l1=min(1/16*mapsizbb-1,l0+1);
         r4=mapbb4[l0][c0][0]*(1-u)*(1-v)+mapbb4[l0][c1][0]*u*(1-v)+mapbb4[l1][c0][0]*(1-u)*v+mapbb4[l1][c1][0]*u*v;
         g4=mapbb4[l0][c0][1]*(1-u)*(1-v)+mapbb4[l0][c1][1]*u*(1-v)+mapbb4[l1][c0][1]*(1-u)*v+mapbb4[l1][c1][1]*u*v;
         b4=mapbb4[l0][c0][2]*(1-u)*(1-v)+mapbb4[l0][c1][2]*u*(1-v)+mapbb4[l1][c0][2]*(1-u)*v+mapbb4[l1][c1][2]*u*v;
         
         c0=floor(c*1/32);l0=floor(l*1/32);u=1/32*c-c0;v=1/32*l-l0; c1=min(1/32*mapsizbb-1,c0+1); l1=min(1/32*mapsizbb-1,l0+1);
         r5=mapbb5[l0][c0][0]*(1-u)*(1-v)+mapbb5[l0][c1][0]*u*(1-v)+mapbb5[l1][c0][0]*(1-u)*v+mapbb5[l1][c1][0]*u*v;
         g5=mapbb5[l0][c0][1]*(1-u)*(1-v)+mapbb5[l0][c1][1]*u*(1-v)+mapbb5[l1][c0][1]*(1-u)*v+mapbb5[l1][c1][1]*u*v;
         b5=mapbb5[l0][c0][2]*(1-u)*(1-v)+mapbb5[l0][c1][2]*u*(1-v)+mapbb5[l1][c0][2]*(1-u)*v+mapbb5[l1][c1][2]*u*v;
         
         r+=r1+r2+r3+r4+r5;g+=g1+g2+g3+g4+g5;b+=b1+b2+b3+b4+b5;
         r*=bright; r=r^expo; r=4*(256-256/(r+1));
         g*=bright; g=g^expo; g=4*(256-256/(g+1));
         b*=bright; b=b^expo; b=4*(256-256/(b+1));
         setcol(r,g,b);
         setpix(c,l);
      }
}
///////////////////////////////////////////////////////////////////////////////////
halton(index,base){//from wiki pseudo code (http://en.wikipedia.org/wiki/Halton_sequences)
   result=0;
   ib=1/base;
   f=ib;
   i=index;
   while (i>0){
      i1=i*ib;
      i=floor(i1);
      result+=f*(i1-i)*base;
      f*=ib;
   }
   return result;
}
static index=0;
rndx(){
   halton(index,2)
}
rndy(){
   index+=1;
   halton(index,3)
}
///////////////////////////////////////////////////////////////////////////////////
enum{nbr_seeds=1000};//number of points used
static tab_seeds[nbr_seeds][6];//x,y,orbit_length,is_trapped, it_length, it_DE.

init_seeds(){
   for(i=0;i<nbr_seeds;i++){
      tab_seeds[i][0]=(rndx()-0.5)*5;
      tab_seeds[i][1]=(rndy()-0.5)*5;
      tab_seeds[i][3]=mandeliterBT(tab_seeds[i][0],tab_seeds[i][1],tab_seeds[i][2],tab_seeds[i][4],tab_seeds[i][5]);
   }
}

seeds_props(&total,&inside,&outside){
   total=nbr_seeds;inside=0;outside=0;
   for(i=0;i<nbr_seeds;i++){
      x=tab_seeds[i][0];
      y=tab_seeds[i][1];
      if(tab_seeds[i][2]>maxiter) outside++;
      else if(tab_seeds[i][3]) inside++;
           else outside++;
   }
}
transition_probability(length0,length1){
   (1-(maxiter-length0))/(1-(maxiter-length1)/maxiter)
}
mutate11(x,y,&x1,&y1){
   r=nrnd*0.005/mag;//-log(1-rnd)*0.005/mag;//
   phi=rnd*pi*2;
   x1=x+r*cos(phi);
   y1=y+r*sin(phi);
}
mutate1(x,y,&x1,&y1){
   x1=x;y1=y;
   r1=0.0001/mag;
   r2=0.005/mag;
   phi=rnd*pi*2;
   r=r2*exp(-log(r2/r1)*rnd);
   x1+=r*cos(phi);
   y1+=r*sin(phi);
}
mutate2(x,y,&x1,&y1){
   x1=(rndx()-0.5)*5;
   y1=(rndy()-0.5)*5;
}
new_generation(){
   for(i=0;i<nbr_seeds;i++){
      
      lx=tab_seeds[i][0];
      ly=tab_seeds[i][1];
      ll=tab_seeds[i][2];
      lf=tab_seeds[i][3];
      lit=tab_seeds[i][4];
      litDE=tab_seeds[i][5];
      
      if(lf) mandelacc(lx,ly,ll,lit,litDE);
      
      nx=0;ny=0;nl=0;nit=0;nitDE=0;

      if(rnd<9/10) mutate11(lx,ly,nx,ny); else
      mutate2(lx,ly,nx,ny);
      
      nf=mandeliterBT(nx,ny,nl,nit,nitDE);
      
      //tlx=transition_probability(ll,nl);
      //tnx=transition_probability(nl,ll);
      alpha=(nf*nl)/(lf*ll);//nf/lf;//(nf*tnx)/(lf*tlx);//tnx/tlx;//
      if(alpha>rnd) {
         tab_seeds[i][0]=nx; tab_seeds[i][1]=ny;
         tab_seeds[i][2]=nl; tab_seeds[i][3]=nf;
         tab_seeds[i][4]=nit; tab_seeds[i][5]=nitDE;
      }
   }
}
