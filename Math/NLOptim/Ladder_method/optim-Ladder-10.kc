//For display purposes
enum{mapsiz=1024};
static map[mapsiz][mapsiz];
static tex,mx,my;
static zoom=2.001;
static izoom=0;
static mapzom=1;

//parameters of (Rosenbrock) objective function
static apar=1, bpar=2^0, cpar=1;

//Parameters for line search
static ARb0=0.1, ARb1=0.0;

//Admissible error (gradient magnitude)
#define ERR 1e-4

//Options:

//Use gradient extrapolation in second phase of the ladder?
//It reduces the number of function evaluations
#define USE_GRAD_EXTRAPOLATION

//Use refinement of minimum in line search?
//This makes the ladder work better
#define USE_REFINED_MINIMUM

//Number of function evaluations. TODO: compute also number of gradient evaluations
static funEval=0;

(){
   if(numframes==0){
      izoom=1/zoom;
      glDisable(GL_DEPTH_TEST);
      calcMap();
      tex=glsettex(map,mapsiz,mapsiz);//to store the picture of the objective function
   }
   solx=1; soly=1/cpar;//solution point
   
   setcol(255,255,255);
   window(mousx,mousy,mx,my);
   cls(0);
   drawspr(xres*0.5,yres*0.5,1024*izoom*mapzom,0);
   
   setcol(50,250,50);
   drawsphere(solx,soly,-4);
   drawsphere(mx,my,-6);
   //drawOvec(mx,my);
   
   x=mx; y=my;
   smoveto(x,y);
   setcol(250,50,50);
   
//Use Armijo's descent
   funEval=0;
   for(i=0; i<2000; ++i){
      ax=x;ay=y;
      v=gradstep(x,y,x,y);
      slineto(x,y); drawsphere(x,y,5);
      if(v<ERR) break;
   }
   //print stats
   //v=formula(x,y);          
   moveto(10,10); printf("residual: %g",v);
   v=sqrt((x-solx)^2+(y-soly)^2); moveto(10,20); printf("error: %g",v);
   moveto(10,30); printf("iterations: %g",i);
   moveto(10,40); printf("Func. eval: %g",funEval);

   setcol(250,200,50);
   x=mx; y=my;
   smoveto(x,y);
   
//Use Armijo's descent with ladder
   funEval=0;
      first=1;
      for(i=0; i<1000; i++){//restart ladder every n iterations
         ax=x;ay=y;
         v=ladderstep(x,y,x,y,first);if(first>0) first-=1;else first+=1;//first-=1;//
         
         slineto(x,y); drawsphere(x,y,3);
         if(v<ERR) break;
      }
   //print stats          
   moveto(200,10); printf("residual: %g",v);
   v=sqrt((x-solx)^2+(y-soly)^2);
   moveto(200,20); printf("error: %g",v);
   moveto(200,30); printf("iterations: %g",i);
   moveto(200,40); printf("Func. eval: %g",funEval);
}

//---------------------------------------------
ladderstep(x,y,&xx,&yy,first){
   static x_1,y_1;
   if(first>0){
      vx=-dx_formula(x,y); vy=-dy_formula(x,y);
      gv=-(vx*vx+vy*vy);
      t  = findArmijo(x,y,vx,vy,gv,ARb0);
      xx = x+t*vx; yy = y+t*vy;
      x_1=x;y_1=y;
   } else {
      //First phase of the ladder. Here we use a line search along the gradient.
      //It could be any procedure that reduces the residual/objective function value
      
      vx=-dx_formula(x,y); vy=-dy_formula(x,y);      
      gv=-(vx*vx+vy*vy);
      t  = findArmijo(x,y,vx,vy,gv,ARb0);
      xx = x+t*vx; yy = y+t*vy;

      //Second phase
      
#ifdef USE_GRAD_EXTRAPOLATION
      //Uses gradient extrapolation along (px,py) direction
      //See where the gradient becomes orthogonal to (px,py)
      //We pretend that the function is almost quadratic.
      //Works better when the function is "close" to a quadratic
      //It doesn't like very curved narrow valeys
      //but it is faster than the second option
      
      px = xx-x_1; py = yy-y_1;
      lp = sqrt(px*px+py*py);
      
      vx=dx_formula(xx,yy); vy=dy_formula(xx,yy);
      vx_1=dx_formula(x_1,y_1); vy_1=dy_formula(x_1,y_1);
      
      dvx=vx-vx_1; dvy=vy-vy_1;
      
      t=-(vx*px+vy*py)/(px*dvx+py*dvy);
      t=min(2/lp,max(-0.25,t));//The value of t can go wild
      
      xx = xx+t*px; yy = yy+t*py;

#else
      //Uses line search along (px,py) direction

      px = xx-x_1; py = yy-y_1;
      vx=dx_formula(xx,yy); vy=dy_formula(xx,yy);
      gv=(vx*px+vy*py);
      
      //Make sure (px,py) is a descent direction
      //Otherwise flip (px,py)
      if(gv>0){gv=-gv; px=-px; py=-py;}
      
      //check if gradient and (px,py) are not almost perpendicular
      //Otherwise the ladder is reset automatically
      //if( gv* gv * 1e10 > (px*px+py*py)*(vx*vx+vy*vy))
      {
         t  = findArmijo(xx,yy,px,py,gv,ARb1);
         xx = xx+t*px; yy = yy+t*py;
      }
#endif

      x_1=x;y_1=y;
   }
   max(abs(dx_formula(xx,yy)),abs(dy_formula(xx,yy)))
}

gradstep(x,y,&xx,&yy){
   vx = -dx_formula(x,y); vy = -dy_formula(x,y);
   gv=-(vx*vx+vy*vy);
   t  = findArmijo(x,y,vx,vy,gv,ARb0);
   xx = x+t*vx; yy = y+t*vy;
   max(abs(dx_formula(xx,yy)),abs(dy_formula(xx,yy)))
}

//Line search functions-----------------------------
AbetterPt(f0,df0,ft,t){
   den = 2*(ft-f0-df0*t);
   ttmp = -df0*t*t/den;
   if(ttmp<0) return t;
   ttmp 
}
findArmijo(x,y,vx,vy,gv,b){
   l=0.1;
   f0 = formula(x,y);
   
   //estimate the step length
   t = -2 * f0 / gv;
   
   while(1){  
      f = formula(x+t*vx,y+t*vy);    
      if (f-f0 <= t*b*gv) break;
      t*=l;
   }
   
#ifdef USE_REFINED_MINIMUM
   ttmp=Abetterpt(f0,gv,f,t);
   ftmp=formula(x+ttmp*vx,y+ttmp*vy);
   //if (ftmp <= f0+ttmp*b*gv)
   if (ftmp <= f0*bpar*cpar)//Non-uniform descent may help in difficult cases (for example when bpar is really big)
      t=ttmp;
#endif
   t
}
//Objective function-----------------------------
#if 1
formula(x,y){
   funEval+=1; //to count the number of evaluations
   apar*(x-1)^2+bpar*(cpar*y-x^2)^2
}
dx_formula(x,y){
   2*((apar*(x-1)-bpar*2*x*(cpar*y-x^2)))
}
dy_formula(x,y){
   2*bpar*cpar*(cpar*y-x^2)
}
#else
formula(x,y){
   funEval+=1;
   (1.5-x+x*y)^2+(2.25-x+x*y^2)^2+(2.625-x+x*y^3)^2
}
dx_formula(x,y){
   2*((1.5-x+x*y)*(-1+y)+(2.25-x+x*y^2)*(-1+y^2)+(2.625-x+x*y^3)*(-1+y^3))
}
dy_formula(x,y){
   2*(1.5-x+x*y)*x+2*(2.25-x+x*y^2)*(2*x*y)+2*(2.625-x+x*y^3)*(3*x*y^2)
}
#endif
//Utility functions------------------------------
drawOvec(x,y){
   s=-0.000001;
   vx=dx_formula(x,y);
   vy=dy_formula(x,y);
   smoveto(x,y); slineto(x+s*vx, y+s*vy);
}
window(x,y,&wx,&wy){
   wx=(x-xres*0.5)*zoom/512;
   wy=(yres*0.5-y)*zoom/512;
}
drawpix(x,y){
   if(abs(x)>10000 || abs(y)>10000) return;
   xx=izoom*512*x+0.5*xres;
   yy=yres*0.5-izoom*512*y;
   setpix(xx,yy);
}
smoveto(x,y){
   xx=izoom*512*x+0.5*xres;
   yy=yres*0.5-izoom*512*y;
   moveto(xx,yy);
}
slineto(x,y){
   xx=izoom*512*x+0.5*xres;
   yy=yres*0.5-izoom*512*y;
   lineto(xx,yy);
}
drawsphere(x,y,r){
   //if(abs(x)>65000 || abs(y)>65000) return;
   xx=izoom*512*x+0.5*xres;
   yy=yres*0.5-izoom*512*y;
   drawsph(xx,yy,r);
}
drawsphere1(x,y,r){
   //if(abs(x)>65000 || abs(y)>65000) return;
   xx=izoom*512*x+0.5*xres;
   yy=yres*0.5-izoom*512*y;
   rr=izoom*512*r;
   drawsph(xx,yy,rr);
}
specrgb(v,&r,&g,&b){
   v = 0.5*(sin(30*v)+1);
   v=1-v^100;
   v*=127;
   r=v;b=v;g=v;
   //r=exp((v-.75)^2*-8)*256;
   //g=exp((v-.50)^2*-8)*256;
   //b=exp((v-.25)^2*-8)*256;
}
//-------------------------------------------
hypot(x,y)
{
    x = abs(x);
    y = abs(y);
    t = min(x,y);
    x = max(x,y);
    t = t/x;
    return x*sqrt(1+t*t);
}
//-------------------------------------------

calcMap(){
   r=0;g=0;b=0;
   for(l=0;l<mapsiz;l++){
      y=(0.5*mapsiz-l)*4*mapzom/mapsiz;
      for(c=0;c<mapsiz;c++){
         x=(c-0.5*mapsiz)*4*mapzom/mapsiz;
         i=formula(x,y);
         specrgb((i*1/100)^0.5-0.05,&r,&g,&b);
         map[l][c]=rgb(r,g,b);
      }
   }
}