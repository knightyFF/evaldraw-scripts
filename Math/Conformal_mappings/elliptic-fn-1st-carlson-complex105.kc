// Preliminary results with conformal mapping from upper half plane to a rectangle.
// Here infinty is mapped to 0 which is not what we would like.
// The other difficulty is that the ellptic integral is multivaued because of the poles!
//  I had to cheat in the qsqrt() to make things relatively smooth. I take the branche where Im(sqrt(z))>0. this way in the evaluation Rf()
// is dicontinuous on the real axis and absolutely smooth upward (and downward) which is good for our mapping.
// Message for the evantual mathematician reading this: Apologies and Help!

//mapping upper half plane to rectangle using Rf function: http://dlmf.nist.gov/19.32
//Carlson method for computing elliptic integrals (real and complex): http://arxiv.org/pdf/math/9409227.pdf
(){
   a=4;b=0;c=-1/4;
   eps=0.00000001;
   zf=800;
   cls(0);
   setcol(0xff0000);
   x1=0;y1=0;x2=0;y2=0;x3=0;y3=0;
   moveto(0.1*xres,0.9*yres);
   RF(0,eps,a-b,eps,a-c,eps,x1,y1);
   RF(c-a,eps,c-b,eps,0,eps,x3,y3);
   x2=x1+x3;y2=y1+y3;
   xx1=0.1*xres+y3*zf; yy1=0.9*yres+x3*zf; lineto(xx1,yy1);//cheating with orientation because we are not on the same leaf as expected... don't know how to get same results as Carlson.  
   xx2=0.1*xres+y2*zf; yy2=0.9*yres+x2*zf; lineto(xx2,yy2);
   xx3=0.1*xres+y1*zf; yy3=0.9*yres+x1*zf; lineto(xx3,yy3);
   lineto(0.1*xres,0.9*yres);

   setcol(0xffff00);
   for(r=0;r<1;r+=0.09999999999){
      t=0;
      x=r*cos(t);y=r*sin(t);
      disc2hp(x,y,x,y);
      RF(x+a,y,x+b,y,x+c,y,x1,y1);
      x1=0.1*xres-x1*zf;//cheat normally +x1*zf
      y1=0.9*yres-y1*zf;
      moveto(x1,y1);
      for(t=0;t<=2*PI;t+=PI*0.002){
         x=r*cos(t);y=r*sin(t);
         disc2hp(x,y,x,y);
         RF(x+a,y,x+b,y,x+c,y,x1,y1);
         x1=0.1*xres-x1*zf;//
         y1=0.9*yres-y1*zf;
         lineto(x1,y1);
      }
   }
   setcol(0x00ffff);
   for(t=0;t<=2*PI;t+=PI*0.05){
      r=0;
      x=r*cos(t);y=r*sin(t);
      disc2hp(x,y,x,y);
      RF(x+a,y,x+b,y,x+c,y,x1,y1);
      x1=0.1*xres-x1*zf;//cheat normally +x1*zf
      y1=0.9*yres-y1*zf;
      moveto(x1,y1);
      for(r=0;r<1;r+=0.00499999){
         x=r*cos(t);y=r*sin(t);
         disc2hp(x,y,x,y);
         RF(x+a,y,x+b,y,x+c,y,x1,y1);
         x1=0.1*xres-x1*zf;//
         y1=0.9*yres-y1*zf;
         lineto(x1,y1);
      }
   }
}

disc2hp(x,y,&x,&y){
   x0=1-x;y0=-y;
   qinv(x0,y0,x0,y0);
   x=1+x;
   qmul(x,y,x0,y0,x0,y0);
   y=x0;x=-y0+0.;
}
ff(rz,iz,a,b,c){
   r0=rz+a; i0=iz;
   r1=rz+b; i1=iz;
   r2=rz+c; i2=iz;
   qmul(r0,i0,r1,i1,r0,i0);
   qmul(r0,i0,r2,i2,r0,i0);
   qsqrt(r0,i0,r0,i0);
   qabs2(r0,i0)
}
RF(rx,ix,ry,iy,rz,iz,&rm,&im){//R_F Carlson symmetric form of elliptic integrals using his method. It converges quickly. (typically one iter is enough). 
   //very very ugly coding... need cleanup and some optimizations.
   rxo=rx;ixo=ix; ryo=ry;iyo=iy; rzo=rz;izo=iz;
   auto rt,it,ra0,ia0;
   ra0=1/3*(rx+ry+rz); ia0=1/3*(ix+iy+iz);
   ran=ra0;ian=ia0;
   r=0.0003;
   q=(3*r)^(-1/6)*max(qabs(ra0-rx,ia0-ix),max(qabs(ra0-ry,ia0-iy),qabs(ra0-rz,ia0-iz)));
   
   i=0;
   do 
   {
      //m=sqrt(x*y)+sqrt(y*z)+sqrt(z*x);
      qmul(rx,ix,ry,iy,rt,it); qsqrt(rt,it,rm,im);
      qmul(ry,iy,rz,iz,rt,it); qsqrt(rt,it,rt,it); qadd(rt,it,rm,im,rm,im);
      qmul(rz,iz,rx,ix,rt,it); qsqrt(rt,it,rt,it); qadd(rt,it,rm,im,rm,im);
            
      ran=0.25*(ran+rm); ian=0.25*(ian+im);
      
      qadd(rx,ix,rm,im,rx,ix);rx*=0.25;ix*=0.25;//x=0.25*(x+m);
      qadd(ry,iy,rm,im,ry,iy);ry*=0.25;iy*=0.25;//y=0.25*(y+m);
      qadd(rz,iz,rm,im,rz,iz);rz*=0.25;iz*=0.25;//z=0.25*(z+m);
   
      
      i++;
   } 
   while(qabs(ran,ian)*4^i<q && i<10);
   qinv(ran,ian,ran,ian);
   k=1/4^i;
   
   //X=(A0-x)/(An*4^n) 
   qadd(ra0,ia0,-rxo,-ixo,rx,ix);
   qmul(rx,ix,ran,ian,rx,ix); rx*=k;ix*=k;
   
   //Y=(A0-y)/(An*4^n) 
   qadd(ra0,ia0,-ryo,-iyo,ry,iy);
   qmul(ry,iy,ran,ian,ry,iy); ry*=k;iy*=k;
   
   //Z=-X-Y 
   //qadd(-rx,-ix,-ry,-iy,rz,iz);
   qadd(ra0,ia0,-rzo,-izo,rz,iz);
   qmul(rz,iz,ran,ian,rz,iz); rz*=k;iz*=k;
   
   //X*Y
   auto rxy,ixy;
   qmul(rx,ix,ry,iy,rxy,ixy);
   
   //Z*Z
   auto rzz,izz;
   qmul(rz,iz,rz,iz,rzz,izz);
   
   //E3=X*Y*Z
   auto re3,ie3;
   qmul(rxy,ixy,rz,iz,re3,ie3);
   
   //E2=X*Y-Z*Z
   auto re2,ie2;
   qadd(rxy,ixy,-rzz,-izz,re2,ie2);
   
   //An^-1/2
   qsqrt(ran,ian,ran,ian);
   
   //E2^2
   auto re22,ie22;
   qmul(re2,ie2,re2,ie2,re22,ie22);
   
   //E2*E3
   auto re23,ie23;
   qmul(re2,ie2,re3,ie3,re23,ie23);
   
   //Rf/An^-0.5
   rm=1-1/10*re2+1/14*re3+1/24*re22-3/44*re23;
   im= -1/10*ie2+1/14*ie3+1/24*ie22-3/44*ie23;
   
   //Rf
   qmul(ran,ian,rm,im,rm,im);
   i/10
}
qadd(x0,y0,x1,y1,&xo,&yo){
   xo=x0+x1;
   yo=y0+y1;
}
qmul(x0,y0,x1,y1,&xo,&yo){
   xo=x0*x1-y0*y1;
   yo=x0*y1+x1*y0;
}
qabs2(x,y){
   x*x+y*y;
}
qabs(x,y){
   sqrt(x*x+y*y);
}
qsqrt(x,y,&xo,&yo){
   r=qabs2(x,y)^0.25;
   t=0.5*atan2(y,x);
   xo=r*cos(t);yo=r*sin(t);
   if(y<0){xo=-xo;yo=-yo;}
}
qsqrt1(x,y,&xo,&yo){
   r=qabs(x,y);
   xo=sgn(y)*sqrt(0.5*(r+x));
   yo=sqrt(0.5*(r-x));
   //if(yo<0){xo=-xo;yo=-yo;}
}
qinv(x,y,&xo,&yo){
   r=1/qabs2(x,y);
   xo=x*r; yo=-r*y;
}