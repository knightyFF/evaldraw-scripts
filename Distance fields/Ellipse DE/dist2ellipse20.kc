(x,y){
   auto p[2],fp[2];
   static frm=-1,mx,my,md;
   static a=1, b=4;
   if(numframes>frm){
      frm=numframes;
      mx=(mousx-0.5*xres)*0.01;
      my=(0.5*yres-mousy)*0.01;
      md=newton(mx,my,a^2,b^2);
   }
   if((x-mx)^2+(y-my)^2<md^2) return 0;
   p[0]=x;p[1]=y;
   d=newton(x,y,a^2,b^2)^0.25;
}
foo(p[2],fp[2],x0,y0,a,b){
   x=p[0];y=p[1];
   fp[0]=(x-x0)*b*y-(y-y0)*a*x;
   fp[1]=a*x*x+b*y*y-1;
}
jfoo(p[2],jp[2][2],x0,y0,a,b){
   x=p[0];y=p[1];
   jp[0][0]= 2*b*y; jp[0][1]=a*x-b*(x-x0);
   jp[1][0]=-2*a*x; jp[1][1]=b*y-a*(y-y0);
   jp[0][0]*jp[1][1]-jp[1][0]*jp[0][1]
}
pseudonearest(p[2],a,b){
   x=p[0];y=p[1];
   d=(a+b-(x^2+y^2))^2-4*(a*b-(x^2*b+y^2*a));
   d=sqrt(d);
   m=0.5*(x^2+y^2-a-b-d);
   x1=sqrt(abs(a*(a+m)/(a-b)));//I use the abs() in order to avoid negative values caused by numerical inacuracies
   y1=sqrt(abs(b*(b+m)/(b-a)));
   p[0]=x1;p[1]=y1;
}
newton(x0,y0,a,b){
   x0=abs(x0);y0=abs(y0);
   auto p[2],dp[2],fp[2],jp[2][2];
   //initial estimate
   p[0]=x0;p[1]=y0;
   pseudonearest(p,1/a,1/b);
   for(i=0;i<5;i++){
      foo(p,fp,x0,y0,a,b);//evaluate function
      if(abs(fp[0])+abs(fp[1])<0.001) break;//close enought?
      det=jfoo(p,jp,x0,y0,a,b);//get inverse jacobian
      det=1/det;
      dp[0]=det*(jp[0][0]*fp[0]+jp[0][1]*fp[1]);//get delta
      dp[1]=det*(jp[1][0]*fp[0]+jp[1][1]*fp[1]);
      p[0]-=dp[0];p[1]-=dp[1];//next estimate
   }
   //i/10//
   sqrt((x0-p[0])^2+(y0-p[1])^2)
}