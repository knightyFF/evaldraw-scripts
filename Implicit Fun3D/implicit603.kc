//Header begin////////////////////////////////////////////////////////////////////////////////////
// Implicit surfaces viewer 
// By Abdelaziz Nait Merzouk (knight_aziz@hotmail.com)
// Nov, Dec 2008
// 
// TERMES OF USE
// 1- No Warranty: Use at your own risk.
// 2- You can distribute this file to anyone you wish.
// 3- Enjoy.
//
//Description begin///////////////////////////////////////////////////////////////////////////////
//  This is a simple raytracer for implicit surfaces defined by a 3D scalar fonction.
//  The only thing new here is the root finding algorithm. It is an adaptive "marching point" 
// algorithm. It is not robust as AA/IA & bezier/B-spline techniques but gives very good results
// and fails seldom (depending on the degree of the implicit and the settings of the root finder). 
//  The rmaining is classic andcan be found in the litterature.
//  The traversal algorithm works just fine for C2 surfaces (that is, functions that are continuous
// and their first derivative too).
//  There may be holes especially when using min and max (for CSG) one solution
// for this is scaling "correctly" the functions: the function that have the lowest order should be
// multiplied by an appropriate value.(to verify!)
// 
// Bibliography: 
// 
//Description end/////////////////////////////////////////////////////////////////////////////////
//
//Usage begin/////////////////////////////////////////////////////////////////////////////////////
// runs under evaldraw (http://advsys.net/ken/download.htm)
// (assuming azerty keyboard)
// Traversal algorithm tweeks:
//  The default settings works fine in general. If you notice holes or anormal things you can
// change the parameters:
//  - Hold "T" and press "+" or "-" to increase/decrease prediction step multiplier.
//  - Hold "M" and press "+" or "-" to increase/decrease initial step length.
//  - Hold "I" and press "+" or "-" to increase/decrease max number of iterations.
//  - Hold "E" and press "+" or "-" to increase/decrease max error
//  - Press "C" to change scaling of the function by using a log() function. This reduces the number
//    of iterations but may leed the root finder to fail.
//  - Press "D" to see the number of iterations (given by the third value)
//  - Press "B" to change the bounding volume box/sphere (box by default).
//  - Hold right [shift] and move the mouse to change bounding sphere/box size.
// Other controls:
//   Navigation:
//    - Hold left mouse button and move the mouse to pan.
//    - Hold right mouse button and move the mouse to zoom.
//    - Hold left [shift] and move the mouse to turn around (scroll wheel to change distance).
//    - Hold left [ctrl] and move mouse to turn light spot (around 0,0,0) (scroll wheel change dist).
//    - You can render the light spot by setting showlight (see the enum below) to 1.
//   Raytracer params:
//    - Press "S" to show/hide shadows.
//    - Hold "R" and press "+"/"-" to increase/decrease the number of reflexions.
//    - Press "L" to change coloring scheme.
//   Parameters: There are five free parameters for use with the implicit functions. Hold on of
//  (non keypad) keys "1"..."5" and move the mouse. There is also a "time" parameter (in seconds).
//
//Usage end///////////////////////////////////////////////////////////////////////////////////////
//
//Credits :
// - Ken Silverman (http://advsys.net/ken) who made evaldraw!
// - counting_pine (from JonoF's forum "http://www.jonof.id.au/forum/") for the idea of raytracing 
//   with evaldraw in (x,y,&r,&g,&b) mode
// - taby (from gamedev.net forums) who suggested to me the dot product colouring scheme.
//Header end//////////////////////////////////////////////////////////////////////////////////////

static testing=0;// Press "D" to see the number of iterations (blue component)
static param1=1,param2=1,param3=1,param4=1,param5=1,time=0;// hold "1","2"... and drag the mouse
static sclit=0;
static bounding=0,bradius=2.5;//Size of the bounding sphere / rectangle
static cheby[200][200];
enum {showlight=0};
//Press {ctrl enter} to recompile and reset parameters to default
(x,y,&r,&g,&b)
{
   static theta=0.5,phi=0.3,Dist=15,focal=5;//view params
   static Ltheta=1,Lphi=0.5,LDist=5;//view params
   static O[3],L[3],vi[3],vj[3],vk[3],vt[3],O2=0;
   static frm=-1;
   static mx,my,mz;
   static maxreflextions=0,shadows=0,shading=0,interactive=0;//Try "S" "B" and "I" keys
   static threshold=1.0,maxstep=0.125,errmax=0.000030517578125,maxiter=500;//FirstRoot() parameters
   
   eps=2^-16;ieps=2^16;
   
   if (numframes>frm)
   {
      if(frm==-1) for(j=1;j<200;j++)for(i=1;i<j;i++) cheby[j][i]=1/(2*sin(i*pi/j)^2);
      //errmax=2^-11;
      if (keystat(0x2a)){ //Left Shift
         readmouse(mx,my,mz);
         theta+=mx*0.01;
         phi-=my*0.01;phi=max(-0.5*pi,min(0.5*pi,phi));
         Dist+=Dist*mz*0.0005;dist=max(0,dist);
         interactive=1;
      }  else if (keystat(0x1d)){ //Left Ctrl
         readmouse(mx,my,mz);
         Ltheta+=mx*0.01;
         Lphi-=my*0.01;Lphi=max(-0.5*pi,min(0.5*pi,Lphi));
         LDist+=LDist*mz*0.0005;Ldist=max(0,Ldist);
         interactive=1;
      }  else if (keystat(0x36)){ //Right Shift
         readmouse(mx,my,mz);
         bradius+=mx*0.01;
         bradius=max(1,bradius);
         bradius=min(4,bradius);
         interactive=1;
      }  else if(keystatus[0x02]){//"1"
         readmouse(mx,my,mz);
         param1+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x03]){//"2"
         readmouse(mx,my,mz);
         param2+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x04]){//"3"
         readmouse(mx,my,mz);
         param3+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x05]){//"4"
         readmouse(mx,my,mz);
         param4+=mx*0.01;
         interactive=1;
      } else if(keystatus[0x06]){//"5"
         readmouse(mx,my,mz);
         param5+=mx*0.005;
         interactive=1;
      } else {readmouse(mx,mx,mx);interactive=0;}
      if(keystatus[0x30]){keystatus[0x30]=0;bounding=(bounding+1)%2;}//"B"
      if(keystatus[0x1f]){keystatus[0x1f]=0;shadows=(shadows+1)%2;}  //"S" for shadows
      if(keystatus[0x20]){keystatus[0x20]=0;testing=(testing+1)%2;}  //"D"
      if(keystatus[0x2e]){keystatus[0x2e]=0;sclit=(sclit+1)%2;}  //"C"
      if(keystatus[0x26]){keystatus[0x26]=0;shading=(shading+1)%3;}  //"L" for lighting (!?)
      if(keystatus[0x17]){//"I"
         maxiter+=(keystatus[0x0d]+keystatus[0x4e])*10;
         maxiter-=(keystatus[0x07]+keystatus[0x4a])*10;
         maxiter=max(maxiter,10);maxiter=min(maxiter,1000);
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      } 
      if(keystatus[0x14]){//"T"
         threshold+=(keystatus[0x0d]+keystatus[0x4e])*0.1;
         threshold-=(keystatus[0x07]+keystatus[0x4a])*0.1;
         threshold=max(threshold,0.1);threshold=min(threshold,10);
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      }  
      if(keystatus[0x12]){//"E"
         errmax*=2^(keystatus[0x0d]+keystatus[0x4e]);
         errmax*=2^-(keystatus[0x07]+keystatus[0x4a]);
         errmax=max(errmax,2^-26);errmax=min(errmax,2^-8);
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      } 
      if(keystatus[0x27]){//"M"
         maxstep*=2^(keystatus[0x0d]+keystatus[0x4e]);
         maxstep*=2^-(keystatus[0x07]+keystatus[0x4a]);
         maxstep=max(maxstep,1/32);maxstep=min(maxstep,1);
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      }
      if(keystatus[0x13]){//"R" for reflexions
         maxreflextions+=(keystatus[0x0d]+keystatus[0x4e]);
         maxreflextions-=(keystatus[0x07]+keystatus[0x4a]);
         maxreflextions=max(maxreflextions,0);level=min(maxreflextions,3);//Not necessary to go beyond 3 reflexions
         keystatus[0x0d]=0;keystatus[0x4e]=0;
         keystatus[0x07]=0;keystatus[0x4a]=0;
      }
           
      O[0]=dist*cos(phi)*cos(theta);
      O[1]=dist*cos(phi)*sin(theta);
      O[2]=dist*sin(phi);
      O2=O[0]*O[0]+O[1]*O[1]+O[2]*O[2];
      L[0]=Ldist*cos(Lphi)*cos(Ltheta);
      L[1]=Ldist*cos(Lphi)*sin(Ltheta);
      L[2]=Ldist*sin(Lphi);
      vk[0]=-cos(phi)*cos(theta);
      vk[1]=-cos(phi)*sin(theta);
      vk[2]=-sin(phi);
      vi[0]=-sin(theta);
      vi[1]= cos(theta);
      vi[2]= 0;
      vj[0]=-sin(phi)*cos(theta);
      vj[1]=-sin(phi)*sin(theta);
      vj[2]=cos(phi);
      vt[0]=focal*vk[0];
      vt[1]=focal*vk[1];
      vt[2]=focal*vk[2];
      frm=numframes;
      time=klock();
   }
   
   r=0;g=0;b=0;//Initially no light (we will add light as stepping forward)
   
    
   // Ray tracing. No refraction cause it needs recursion. This is difficult in (x,y...) mode because
   //of non safe multithreading (MT): returning multiple values (needed for vectors) implies declaring
   //them as static. Then if you use MT, the threads will try to write the same variables at the
   //same time => snow, interlock...
   
   //generates ray direction and transforms it from screen to world coordinates
   v0=x*vi[0]+y*vj[0]+vt[0];
   v1=x*vi[1]+y*vj[1]+vt[1];
   v2=x*vi[2]+y*vj[2]+vt[2];
   
   //Normalize it
   d1=1/sqrt(v0*v0+v1*v1+v2*v2);
   v0*=d1;v1*=d1;v2*=d1;

   //ray direction goes through the current screen pixel
   //Ray origin is the eye
   ox=O[0];oy=O[1];oz=O[2];
   vx=v0;vy=v1;vz=v2;//We may need the original ray's origin and direction
   
   riter=maxreflextions+1;//number of iteration. The first is from the eye. next ones are relections
   Lmul=1;
   do{
      nohit=1;
      //Intersect with bounding volume
      if(bounding){//Bounding sph with radius bradius
         bp=vx*Ox+vy*Oy+vz*Oz;
         oo=ox*ox+oy*oy+oz*oz;
         c=oo-bradius*bradius;
         Sd=bp*bp-c;//Delta
         if (Sd<0) break;
         Sd=sqrt(Sd);
         dmin=-bp-Sd;dmax=-bp+Sd;
      }else{//Bounding cube with "radius" bradius
         a0=1/Vx;a1=-(bradius+Ox)*a0;a0*=bradius-Ox;
         dmin=min(a0,a1);dmax=max(a0,a1);
         a0=1/Vy;a1=-(bradius+Oy)*a0;a0*=bradius-Oy;
         dmin=max(dmin,min(a0,a1));dmax=min(dmax,max(a0,a1));
         a0=1/Vz;a1=-(bradius+Oz)*a0;a0*=bradius-Oz;
         dmin=max(dmin,min(a0,a1));dmax=min(dmax,max(a0,a1));
      }
   
      //cliping
      if(dmin>=dmax || dmax<0) break;
      dmin=max(0,dmin);
  
      ox=ox+dmin*vx;oy=oy+dmin*vy;oz=oz+dmin*vz;
      vx=(dmax-dmin)*vx;vy=(dmax-dmin)*vy;vz=(dmax-dmin)*vz;   
      
      //find next intersection
      t=nextroot(ox,oy,oz,vx,vy,vz,threshold,maxstep/(dmax-dmin),errmax,maxiter);
      if(testing) goto number;

      if(t>=1)  break;
      nohit=0;
      
      //shade it

      //gradient vector
      x=ox+t*vx;y=oy+t*vy;z=oz+t*vz;
      vs=surf(x,y,z);
      dsx=ieps*(surf(x+eps,y,z)-vs);
      dsy=ieps*(surf(x,y+eps,z)-vs);
      dsz=ieps*(surf(x,y,z+eps)-vs);
   
      //normalize the gradient vector
      imod=1/sqrt(dsx^2+dsy^2+dsz^2);
      dsx*=imod;dsy*=imod;dsz*=imod;
            
      //Normalize incident vector
      imod=1/sqrt(vx*vx+vy*vy+vz*vz);
      vx*=imod;vy*=imod;vz*=imod;
   
      // The side of the surface is given by the sign of the value of the function definig it at the current point
      side=sgn(vs);//-sgn(dsx*vx+dsy*vy+dsz*vz);//
   
      // Bias to let next rays escape the surface
      bias=100.*side*errmax*(imod+1);
      x+=bias*dsx;y+=bias*dsy;z+=bias*dsz;
   
      //Light vector
      xl=L[0]-x;yl=L[1]-y;zl=L[2]-z;
      
      //Normalize Light vector
      imod=1/sqrt(xl^2+yl^2+zl^2);
      xl*=imod;yl*=imod;zl*=imod;
      
      // Cosine of the angle between normal & light direction
      nldot=xl*dsx+yl*dsy+zl*dsz;
   
      //Reflection vector. Because normal and incident vectors are already normalized this one also is!
      nv=dsx*vx+dsy*vy+dsz*vz;
      rx=vx-2*nv*dsx;ry=vy-2*nv*dsy;rz=vz-2*nv*dsz;
      rl=rx*xl+ry*yl+rz*zl;// Cosine of the angle between reflection & light directions
   
      //Shadows
      if(shadows)
      if(nldot*side>0){
         dmax=NextExit(x,y,z,xl,yl,zl);
         vx=dmax*xl;vy=dmax*yl;vz=dmax*zl;
         t=nextroot(x,y,z,vx,vy,vz,threshold,maxstep,errmax,maxiter);
         if (t>0.999) t=1;else t=0;
         nldot*=t;
         rl*=t;
      }else rl=0;
   
      //Shading calculations
      dj=side*nldot;dj=max(dj,0);
      rl=max(rl,0);rl=rl^50;
      
      if(Shading==1){//Color depends on the direction of reflection vector.Not correct but Cool!
         dj=0.55*dj+0.2;
         r1=(dj*(abs(rx)+0.4)+rl)*256; g1=(dj*(abs(ry)+0.4)+rl)*256; b1=(dj*(abs(rz)+0.4)+rl)*256;
      } else if(Shading==2){//Constant Color better with shadows and reflexions
         if(side<0){r1=200;g1=100;b1=50;}
         else{r1=220;g1=220;b1=220;}
         rl*=150;
         dj=0.6*dj+0.2;
         r1*=dj;g1*=dj;b1*=dj;
         r1+=rl;g1+=rl;b1+=rl;
      } else {//Color depends on the direction of normal vector. Cool also
         dj=0.55*dj+0.2;
         //dj*=0.5;
         //r1=(dj+0.4*abs(dsx))*256; g1=(dj+0.4*abs(dsy))*256; b1=(dj+0.4*abs(dsz))*256;
         r1=(dj*(abs(dsx)+0.4)+rl)*256; g1=(dj*(abs(dsy)+0.4)+rl)*256; b1=(dj*(abs(dsz)+0.4)+rl)*256;
      }
      
      r+=Lmul*r1;g+=Lmul*g1;b+=Lmul*b1;//We add this iteration's light contribution
   
      //Next ray direction is the reflection vector
      //Next ray origin is the current intersection with the surface
      ox=x;oy=y;oz=z;
      vx=rx;vy=ry;vz=rz;
      
      lmul*=0.35;//We multiply by the reflexion coefficient. To do eventually: Fresnel term

      riter--;
   } while(riter);

   if(nohit) {//"sky's" light. To do eventually: cube map
      k=(vz/sqrt(vx*vx+vy*vy+vz*vz)+1.5);
      r+=k*Lmul*20;
      g+=k*Lmul*60;
      b+=k*Lmul*90;
   }
   
   //To see the spotlight. a little bit annoying
   if(showlight){
      pv=L[0]*v0+L[1]*v1+L[2]*v2;
      ov=O[0]*v0+O[1]*v1+O[2]*v2;
      vv=v0*v0+v1*v1+v2*v2;
      t=(pv-ov)/vv;
      pv0=O[0]+t*v0-L[0];pv1=O[1]+t*v1-L[1];pv2=O[2]+t*v2-L[2];pv=pv0^2+pv1^2+pv2^2;
      if(pv<0.1 && t>0){r+=255;g=+255;b=0;}
   }
      
   //The end
   return;
   
   //To see iterations number: 
   number:
   //t*=1/100;
   r=max(min((t*4-256),256),0);g=max(min((256-t*2),256),0);b=t;
}
surf(x,y,z){//the surface's function
   //min(Dervish(x*1.5,y*1.5,z*1.5),100*(x+bradius-0.01)*(y+bradius-0.01)*(z+bradius-0.01));
   //min(min(sphere(x,y,z-param1,param1),sphere(x,y,z+param1,param1)),10*(x+bradius-0.01)*(y+bradius-0.01)*(z+bradius-0.01));
   //SquaredOffSphere(x,y,z);
   //max(cube(x,y,z,param2),min(Cylinder(y,z,param1),min(Cylinder(x,y,param1),Cylinder(x,z,param1))));
   //min(Dervish(x,y,z),100*Cube(x,y+4,z,2));
   //x/=1/(param4*z^2+1)*(param3+1);y/=1/(param4*z^2+1)*(param3+1);sphere(x,y,z*param2,param1);
   //twistcube(x,y,z,param1,param2);
   //z*=param5;lerp(sphere(x,y,z-param2,param3),cube(x,y,z+param4,1),param1);
   //Barth(x,y,z)
   //Bretzel(x,y,z);//most difficult case?
   //-meatball(x,y,z,param1,param2);
   //Lerp(x,y,z)
   //Cerp(z-abs(x)*abs(y),x^2+y^2+z^2-4,param1)
   //lerp(0.1*Mitchell(x,y,z),Cube(x,y,z-param2,param3+1),param1)
   //max(Cube(x,y,z,1),-Sphere(x,y,z-param2,param1))
   //max(param2*Monkey(x+param1,y,z),Mitchell(x,y,z))
   //lerp(Dervish(x,y,z),-Sphere(x+param2,y,z,param1),param3);
   //x^2+y^2+z^2+2*x*y*z-1
   //x^3+y^3+z^3-x-y-z
   //(x^2*y^2 + y^2*z^2 + z^2*x^2 - 2*x*y*z -param1^3);
   //(2*(x*x*y*y+y*y*z*z+z*z*x*x))
   //r=sqrt(x*x+y*y);(z-param1*sin(r*param3-2*time)/(r^2+1))
   //r=x*x+y*y;z-exp(-r)
   //r=x*y;r*z-1
   //r=x*x+y*y;if(1-r>0.1) return z-sqrt(1-r);else return z-sqrt(0.1);
   //r=x*x+y*y;if(1-r>0.1) return z;else return z-1;//Don't work properly for now
   //C8Surface(x,y,z);//==Chumtov8(x,y,z)+1
   //ChmutovN(x,y,z,6)+1//add 1 to get a CN surface
   //Klein(x,y,z)-param1+1
   //Sarti12(param1*x,param1*y,param1*z)
   //Labs7(x,y,z,param1)
   //BarthDecic(x,y,z);
   //min(-lerp(dodecube(x,y,z),sphere(x,y,z,1.5),param3*0.2),10*max(cube(x,y,z,param2),min(Cylinder(y,z,param1),min(Cylinder(x,y,param1),Cylinder(x,z,param1)))))
   //dodecube(x,y,z)
   //heart(x,y,z*0.5)-param1*0.1+0.1
   //x+=0;(x^2*(1.21-x^2)^2*(3.8-x^2)^3-10*y^2)+60*z^2-2
   //Bretzel(x,y,z)-param1;
   //Cone(x,y,z,param1)
   //SuperEllipsoid(x,y,z,param1,param2,param3);
   //julia(x,y,z)
   //(x*y)^2*z+0.25*(x^2+y^2+z^2-1)^2
   //sarti8(x,y,z,0.5)
   
   // From P. Bourke's site
   //sin(param1*x*y)+sin(param1*y*z)+sin(param1*z*x)//Borg surface
   //c1=param1+.4;c2=param2+.3; d=param3+0.1;(((x^2+y^2-1)^2+(z-1)^2)*(x^2/c1^2+(z-c2)^2-1)^2+y^2)-d //Pilz: Where c1 is around 1.4 and c2 is around 0.3
   //-3*x^8-3*y^8-2*z^8+5*x^4*y^2*z^2+3*x^2*y^4*z^2-4*(x^3+y^3+z^3+1)+(x+y+z+1)^4+1;//Tubey:
   //c=1;d=0.05;(((x-1)^2+y^2-c^2)*((x+1)^2+y^2-c^2))^2+z^2-d;//Pretzel2
   //(x^2*(1-x^2)-y^2)^2+z^2-0.01;//Bretzel2
   //25*(x^3*(y+z)+y^3*(x+z)+z^3*(x+y))+50*(x^2*y^2+x^2*z^2+y^2*z^2)-125*(x^2*y*z+x*y^2*z+x*y*z^2)+60*x*y*z-4*(x*y+x*z+y*z);//Weird
   //z^2*x^2-z^4-2*z*x^2+2*z^3+x^2-z^2-(x^2-z)^2-y^4-2*y^2*x^2-y^2*z^2+2*y^2*z+y^2;//Nose?
   //a=param1;b=param2;k=param3;(x^2+y^2+z^2-a*k^2)^2-b*((z-k)^2-2*x^2)*((z+k)^2-2*y^2)//Chair Surface
   //a=param1;b=param2;c=param3;(b-x)*(y^2+z^2)-c^2*a*x^2-c^2*x^3//Strophoid Surface
   //z^2-(0.04-x^4+2*x^6-x^8+2*x^2*y^2-2*x^4*y^2-y^4)//Double torus.Credited to H. Karcher
   
   //2*z+noise(x,y)+0.5*noise(2*x,2*y)+0.25*noise(4*x,4*y)+0.125*noise(8*x,8*y);
   //(sin(param1*x*y)+sin(param1*y*z))^2-sin(param1*z*x)-x*y*z-1
   //lerp(sphere(x,y,param3+z,param2),torus(x,y,z),0.1*param1);
   //z=z+1;sin(param1*x)*sin(param1*y)+param2-param4*exp(-param3*z)
   //min(min(sphere(x,y,z-0.2,0.2),sphere(x,y,z-0.6,0.1)),min(0.1*cube(x,y,20*(z+1),1.5),max(cone(x,y,z-1.1,0.075),1*cube(x,y,z,1))));
   //cylinder(x,z+param1,1)^2-sphere(x,y,z-param1,0)^3-10*param2
   //t=atan2(x,y);r=sqrt(x*x+y*y); (r*sin(t*3))*z+1;
   //y^2*(3*x^2-y^2)-(x^2+y^2)^4-z//six peak
   //(x^2+y^2-param1)*(x^2+z^2-param1)*(y^2+z^2-param1)-param1^2;//.0078+param2//Blend
   //nodal2grid(x*2,y*2,z)
   ninething(x,y,z,0.75)
}
//----------------------------------------------------
ninething(x,y,z,w){
   alpha=sqrt(3);
   w2=w^2; w3=w*w2; w4=w2*w2; w5=w2*w3; w6=w3*w3; w7=w3*w4; w8=w4*w4; w9=w4*w5;
   x2=x^2; x3=x*x2; x4=x2*x2; x5=x2*x3; x6=x3*x3; x7=x3*x4; x8=x4*x4; x9=x4*x5;
   y2=y^2; y3=y*y2; y4=y2*y2; y5=y2*y3; y6=y3*y3; y7=y3*y4; y8=y4*y4; y9=y4*y5;
   z2=z^2; z3=z*z2; z4=z2*z2; z5=z2*z3; z6=z3*z3; z7=z3*z4; z8=z4*z4; z9=z4*z5;
   
   w5*((27*x2-w2)*w2-9*(w+6*x)*x3)+x5*((36*w+21*x)*w3-(9*3*w2-9*w*x+x2)*x2)
   
   +alpha*(81*(2*x2-w2)*w4-(54*(w+1.5*x)*w2+9*(x-6*w)*x2)*x3)*x2*y
   
   +((27*w2*(w+x)-72*(1.5*w+x)*x2)*w4+(w2*(225*w+27*x)+36*x2*(x-3.5*w))*x4)*y2
   
   +alpha*((27*w3+(108*w+180*x)*x2)*w3-(135*w2+84*(1.5*w-x)*x)*x4)*y3
   
   +((-54*w2-108*w*x-45*x2)*w3+(135*w2-126*x2)*x3)*y4
   
   +(alpha*(-54*(w+x)*w3-27*w2*x2-126*(w+x)*x3)
   +(w2*(39*w+81*x)+(126*w+84*x)*x2)*y
   +alpha*9*(3*w2+6*w*x+4*x2)*y2
   -9*(w+x)*y3-alpha*y4)*y5
   
   -(((27*z2-4*w2)*w2-9*(w+6*z)*z3)*w5+((36*w2+(21*w-27*z)*z)*w2+(9*w-z)*z3)*z5)/4

}
//----------------------------------------------------
nodal2grid(x,y,z){
   sin(x)*sin(y)+(z*z-1)^2
}
//----------------------------------------------------
sarti8(x,y,z,w){
   x^8+y^8+z^8+w^8+14*(x^4*(y^4+z^4+w^4)+y^4*(z^4+w^4)+(z*w)^4)+
   168*(x*y*z*w)^2-9/16*(x^2+y^2+z^2+w^2)^4
}
//////////////////////////////////////////////////////////////////////////////////////////////////
// utility functions to use for blending
Lerp(a,b,t){// Linear interpolation of a & b by t
   return a*t+(1-t)*b;
}
Cerp(a,b,t){// Cubic interpolation of a & b by t
   return a*t^3+(1-t)^3*b;
}
RFunc(a,b,t){
   t1=1/(1+t);t2=sqrt((a*a+b*b-2*t*a*b));
   mu=t1*(a+b-t2);nu=t1*(a+b+t2);
   a*mu+b*nu
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//Linear things
absolutely(x,y,z){
   z-abs(x)*abs(y)
}

Cube(x,y,z,r){
   max(max(-r-x,max(-r-y,-r-z)),max(x-r,max(y-r,z-r)))
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//Algebraic equations

//   Quadratic: well you don't really want to use this program for those.
//   direct methods are fare more effective up to degree 3 & 4
Sphere(x,y,z,r){
   x^2+y^2+z^2-r^2
}

Cylinder(x,y,r){
   x*x+y*y-r;
}

Cone(x,y,z,a){
   x*x+y*y-a*a*z*z;
}

Whitney(x,y,z){
   x^2*z-y^2
}

//   Cubics
FlipFlap(x,y,z){
   x*x+y*y+z*x*y
}

DingDong(x,y,z){
   (x^2+y^2)+z*(z^2-1)-0.385
}

CrossCap2(x,y,z){
   x^2*y - z^2
}

CayleyCubic(x,y,z){
   4*(x^2+y^2+z^2) + 16*x*y*z - 1
}

CayleyCubic2(x,y,z){
   -5*(x^2*y+x^2*z+y^2*x+y^2*z+z^2*y+z^2*x)+2*(x*y+x*z+y*z)
}

ThreePlanes(x,y,z){
   x*y*z
}

Folium(x,y,z){
   y^2-3*x*y^2+z^2-3*x*z^2+2*x^2
}

Monkey(x,y,z){
   z-x*(x^2-3*y^2)
}

//   Quartics
Piriform(x,y,z){
   x^4-x^3+y^2+z^2
}

CrossCap(x,y,z){
   4*x^2*(x^2+y^2+z^2+z)+y^2*(y^2+z^2-1)
}

SquaredOffSphere(x,y,z){
   x^4 + y^4 + z^4 - 1
}

CubeSphere4(x,y,z){
   (x^4 + y^4 + z^4 - 5*(x^2 + y^2 + z^2 ) + 11.8)
}

PiriformTeardrop(x,y,z){
   x^4-x^3+y^2+z^2
}
BohemianDome(x,y,z){
   -(-y^4-x^4-z^4+2*x^2*z^2+4*y^2-2*x^2*y^2-2*y^2*z^2)
}

Cassini(x,y,z){
   x^4+y^4-z^4-0.5*x^2+0.5*y^2+2*x^2*y^2+0.0627
}
Chubs(x,y,z){
   (x^4+y^4+z^4)-(x^2+y^2+z^2)+0.5
}
Devil(x,y,z){
   x^4+2*x^2*z^2-0.36*x^2-y^4+0.25*y^2+z^4
}
KampyleOfEudoxus(x,y,z){
   y^2+z^2-x^4+0.04*x^2
}
Q1Surface(x,y,z){
   -(x^4+y^4+z^4-4*x^2-4*y^2*z^2-4*y^2-4*z^2*x^2-4*z^2-4*x^2*y^2+20.7846*x*y*z+1)
}
Torus(x,y,z){
   x^4+y^4+z^4+2*x^2*y^2+2*x^2*z^2+2*y^2*z^2-1.06*x^2+0.9*y^2-1.06*z^2+0.2025
}
Mitchell(x,y,z){
   4*(x^4+(y^2+z^2)^2)+17*x^2*(y^2+z^2)-20*(x^2+y^2+z^2)+17
}
//   Quintics
Dervish(x,y,z){
   z=-z;
   c=sqrt(5-sqrt(5))/2;
   r=(1+3*sqrt(5))/4;
   q=(1-c*z)*(x^2+y^2-1+r*z^2)^2;
   a=-(8/5)*(1+1/sqrt(5))*sqrt(5-sqrt(5));
   h1=x-z;
   h2=cos(2*Pi/5)*x-sin(2*Pi/5)*y-z;
   h3=cos(4*Pi/5)*x-sin(4*Pi/5)*y-z;
   h4=cos(6*Pi/5)*x-sin(6*Pi/5)*y-z;
   h5=cos(8*Pi/5)*x-sin(8*Pi/5)*y-z;
   FF=h1*h2*h3*h4*h5;
   a*FF+q
}

Peninsula(x,y,z){
   x^2+y^3+z^5
}

Kiss(x,y,z){
   -(0.5*x^5+0.5*x^4-y^2-z^2)
}

GlobTeardrop(x,y,z){
   -0.5*x^5+0.5*x^4-y^2-z^2
}

//   Sextics
Klein(x,y,z){
   (x^2+y^2+z^2+2*y-1)*((x^2+y^2+z^2-2*y-1)^2-8*z^2)+16*x*z*(x^2+y^2+z^2-2*y-1);
}
citrus(x,y,z){
   x^2+z^2-4*y^3*(1-0.5*y)^3
}
Barth(x,y,z){
   phi1=(1+sqrt(5))/2;phi2=phi1^2;
   -(4*(phi2*x^2-y^2)*(phi2*y^2-z^2)*(phi2*z^2-x^2)-(1+2*phi1)*(x^2+y^2+z^2-1)^2)
}

T6(x){2*x^2*(3-4*x^2)^2-1;}//Tchebychev polynomial used by Chmutov6 ans C6 (they are level sets of the same equation!)
Chmutov6(x,y,z){
   T6(x)+T6(y)+T6(z)
}
C6Surface(x,y,z){
   T6(x)+T6(y)+T6(z)+1
}

Hunt(x,y,z){
   x*=x;y*=y;z*=z;
   4*(x+y+z-13)^3+27*(3*x+y-4*z-12)^2
}

Heart(x,y,z){
   (2*x^2+2*y^2+z^2-1)^3-(0.1*x^2+y^2)*z^3
}

Ouaw(x,y,z){
   x^2*y^2-x*z^5-z^2
}

KusnerSchmitt(x,y,z){
   x^2*y^2*z^2+3*x^2*y^2+3*x^2*z^2+9*x^2+3*y^2*z^2+9*y^2+9*z^2-32*x*y*z-5
}

Trifolia(x,y,z){
   x^3+y^3+z^3+13*x^3*y^3+13*x^3*z^3+13*y^3*z^3-20*y*x^2-20*y*z^2-20*x*z^2
}

//Septics
Labs7(x,y,z,w){
   a = -0.140106854987125;//the real root of 7*a^3+7*a+1=0
   a1= -0.0785282014969835; a2= -4.1583605922880200; 
   a3= -4.1471434889655100; a4= -1.1881659380714800; 
   a5= 51.9426145948147000;
   x2=x*x; y2=y*y; z2=z*z; w2=w*w;
   r2 = x2+y2;
   u = (z+a5*w)*((z+w)*r2+(a1*z+a2*w)*z2+w2*(a3*z+a4*w))^2;
   p = x*((x2-3*7*y2)*x2^2+y2^2*(5*7*x2-7*y2));
   p+= z*(7*(((r2-8*z2)*r2+16*z2^2)*r2)-64*z2^3);
   s = p - u;
   s
}

//   Octics
X8(x,y,z){
   v=64*(x*x-1)*(y*y-1)*((x+y)^2-2)*((x-y)^2-2);
   v-=(-4*(1+sqrt(2))*(x^2+y^2)^2+(8*(2+sqrt(2))*z^2+2*(2+7*sqrt(2)))*(x^2+y^2)-16*z^4+8*(1-2*sqrt(2))*z^2-(1+12*sqrt(2)))^2;
   -v
}
_X8(x,y,z){
   v=64*(x*x-1)*(y*y-1)*((x+y)^2-2)*((x-y)^2-2);
   v-=(-4*(1-sqrt(2))*(x^2+y^2)^2+(8*(2-sqrt(2))*z^2+2*(2-7*sqrt(2)))*(x^2+y^2)-16*z^4+8*(1+2*sqrt(2))*z^2-(1-12*sqrt(2)))^2;
   -v
}

T8(x){x*=x; 1+x*32*(-1+x*(5+x*(-8+x*4)))}//Tchebychev polynomial used by Chmutov8 ans C8

Chmutov8(x,y,z){
   T8(x)+T8(y)+T8(z)
}

C8Surface(x,y,z){
   T8(x)+T8(y)+T8(z)+1
}

//   Decics
BarthDecic(x,y,z){// Barth's
   w=1.6;
   phi1=(1+sqrt(5))/2;
   (8*(x^2-phi1^4*y^2)*(y^2-phi1^4*z^2)*(z^2-phi1^4*x^2)*(x^4+y^4+z^4-2*((x*y)^2+(x*z)^2+(y*z)^2))+(3+5*phi1)*(x^2+y^2+z^2-w^2)^2*(x^2+y^2+z^2-(2-phi1)*w^2)^2*w^2);
}

//   Dodecics
Sarti12(x,y,z){
   l1=x^4+y^4+z^4+1; l2=x^2*y^2+z^2;
   l3=x^2*z^2+y^2;   l4=x^2+y^2*z^2; l5=x*y*z;
   s10=l1*(l2*l3+l2*l4+l3*l4); s11=l1^2*(l2+l3+l4);
   s12=l1*(l2^2+l3^2+l4^2);    s51=l5^2*(l2+l3+l4); s234=l2^3+l3^3+l4^3;
   s23p=l2^2*l3+l2*l3^2;       s23m=l2^2*l3-l2*l3^2; 
   s34p=l3^2*l4+l3*l4^2;       s34m=l3^2*l4-l3*l4^2; 
   s42p=l4^2*l2+l4*l2^2;       s42m=l4^2*l2-l4*l2^2;
   Q12=(x*x+y*y+z*z+1)^6;
   S12=33*sqrt(5)*(s23m+s34m+s42m)+19*(s23p+s34p+s42p)+10*s234-14*s10+2*s11-6*s12-352*s51+336*l5^2*l1+48*l2*l3*l4;
   22*Q12-243*S12
}

dodecube(x,y,z){
   ((x^2+y^2-0.8^2)^2+(z^2-1)^2)*((y^2+z^2-0.8^2)^2+(x^2-1)^2)*((z^2+x^2-0.8^2)^2+(y^2-1)^2)-0.025
}

//   higher order
//   Some are very slow to render

Bretzel(x,y,z){// degree 24!
   (x^2*(1.21-x^2)^2*(3.8-x^2)^3-10*y^2)^2+60*z^2-2
}

TN(x,n){// Tchebychev of degree N. To do: faster one (too many sines)
   p=1;
   for(k=1;k<n;k++)
      p*=1+(x-1)*cheby[n][k];//1/(2*sin(k*pi/n)^2);
   p*=n*n*(x-1);
   p+1
}
ChmutovN(x,y,z,n) { TN(x,n)+TN(y,n)+TN(z,n) }

CNSurface(x,y,z,n){ TN(x,n)+TN(y,n)+TN(z,n)+1 }

NOffSphere(x,y,z,n){ abs(x)^n+abs(y)^n+abs(z)^n-1 }

//julia(). mi:maximum_iterations. Order: 2^mi. 
//Rendering it directly is difficult because of overflows and excessive iterations count.
// That's why we use log()
julia(x,y,z){
   p0=y; p1=z; p2=x; p3=0;
   jul0=param1;jul1=param2;jul2=0;jul3=0;//Can be changed
   //DJ=getJuliaDist(p,juliac,4,10);
   enum{mi=9};//Can be changed: Aliasing occures for higher values
   i=0;z=0;
   while(i<mi && z<2^54) {  
      //qsqr(p,tmp);qadd(tmp,c,p);==> q<-q^2+c
      {
         tmp0=p0*p0-(p1*p1+p2*p2+p3*p3);
         tmp1=p0*p1*2;
         tmp2=p0*p2*2;
         tmp3=p0*p3*2;
         p0=tmp0+jul0;p1=tmp1+jul1;
         p2=tmp2+jul2;p3=tmp3+jul3;
      }     
      z=p0*p0+p1*p1+p2*p2+p3*p3;
      i++;
   }
   //now the c parameter (jul0...) is negligible.
   z=log(z);
   z*=2^(mi-i);
   z-1
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//Nonlinear

Sherk(x,y,z){ exp(2*z)*cos(2*y)-cos(2*x) }

Blobby(x,y,z){ x^2+y^2+z^2+sin(4*x)-cos(4*y)+sin(4*z)-1 }

Meatball(x,y,z,p1,p2){// Ken's meatball revisited
   a = 0; ff = 6*p1; h = p2;
   for(i=0;i<2;i++)
   {
      aa = noise3d(x*ff,y*ff,z*ff)*h;
      a -= aa; ff *= .38; h /= .38;
   }
   -a + (x*x + y*y + z*z - .9);
}

twistcube(x,y,z,angle,h){//First we transform the input to twist the cube
   c=cos(z*angle);s=sin(z*angle);
   x1=x*c-y*s;y1=x*s+y*c;cube(x1,y1*4,z*h,1);
}

SuperEllipsoid(x,y,z,l,m,n){
   abs(x)^l+abs(y)^m+abs(z)^n-1
}
///////////////////////////////////////////////////////////////////////////////////////////////
//computes x,y and z then calls surf() then scales the result if required by the user
//Surf() is just after the main function
f(t,ox,oy,oz,vx,vy,vz){
   x=ox+t*vx;y=oy+t*vy;z=oz+t*vz;
   y=Surf(x,y,z);
   if(sclit) y=log(abs(y)+1)*sgn(y);//*(abs(t)^2+1)*0.1;
   y
}

//Traversal algorithm
// Return approximation of the first root (if it doesn't miss it)
nextroot(ox,oy,oz,vx,vy,vz,th,smax,errmax,itermax){
   //tweeks: theta (th), smax, errmax, itermax
   eps=2^-16;ieps=2^16;
   t=0;n=0;
   as=0;s=smax;
   y0=f(t,ox,oy,oz,vx,vy,vz);
   if(abs(y0)<errmax) return n;
   ady=f(t+eps,ox,oy,oz,vx,vy,vz);ady=ieps*(ady-y0);//df(t)
   while (t<1){
      y1=f(t+s,ox,oy,oz,vx,vy,vz);
      dy=f(t+s+eps,ox,oy,oz,vx,vy,vz);dy=ieps*(dy-y1);//df(t+s);
      yi1=y0+ady*s;yi0=y1-dy*s;
      ya1=max(yi1,y1);ya0=max(yi0,y0);
      yi1=min(yi1,y1);yi0=min(yi0,y0);
      aa=0.5*(ya1+ya0);ai=0.5*(yi1+yi0);
      if(abs(aa-ai)<abs(0.5*ai)  && yi1*ya0>0 && yi0*ya1>0){
         t+=s;
         if(abs(y1)<errmax || n>itermax || s<errmax) break;
         //smax1=th*(max(abs(y0),abs(y1)))/(abs(ady-dy)+1);
         //smax1=max(1,(abs(y0-y1)+1)/(abs(ady-dy)+1));smax1=min(smax1,1.5*s);
         smax1=max(smax,th*(abs(y0-y1))/(abs(ady-dy)+1));
         //smax1=0.5*min((abs(y1)+1)/(abs(dy)+1),(abs(y0)+1)/(abs(ady)+1));
         y0=y1;ady=dy;
         if(s==as) 
            s*=2; 
         else as=s;
         s=min(s,smax1);
      }else {as=s;s*=1/2;}
      n++;
   }
   if (testing) return n;
   return t;
}

//Exit from the bounding volume. used for secondary rays
// We only need dmax and we are inside the box so dmin is 0
NextExit(o0,o1,o2,v0,v1,v2){
   if(bounding){//intersect with bounding sph with radius bradius
      bp=v0*O0+v1*O1+v2*O2;oo=o0^2+o1^2+o2^2;
      c=OO-bradius*bradius;
      Sd=bp*bp-c;//Delta
      if (Sd<0) return 0;
      Sd=sqrt(Sd);
      dmax=-bp+Sd;
   }else{//intersect with bounding cube with "radius" bradius
      a0=1/V0;a1=-(bradius+O0)*a0;a0*=bradius-O0;
      dmax=max(a0,a1);
      a0=1/V1;a1=-(bradius+O1)*a0;a0*=bradius-O1;
      dmax=min(dmax,max(a0,a1));
      a0=1/V2;a1=-(bradius+O2)*a0;a0*=bradius-O2;
      dmax=min(dmax,max(a0,a1));
   }
   dmax
}