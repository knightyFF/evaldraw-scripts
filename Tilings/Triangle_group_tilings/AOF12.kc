enum{spherical=0,euclidean=1,hyperbolic=2};
static xa,ya,ra;
static xnb,ynb;
static xna,yna,cna;
static mi=20;
static l=2,m=2,n=2;
static case;
(x,y){
   static frm=-1;
   if(frm<numframes){
      frm=numframes;
      k=0;
      if(keystatus[0xc8]){//up
         keystatus[0xc8]=0;
         l+=1;k=1;
      }
      if(keystatus[0xd0]){//dn
         keystatus[0xd0]=0;
         if(l>2) l-=1;k=1;
      }
      if(keystatus[0xcd]){//right
         keystatus[0xcd]=0;
         m+=1;k=1;
      }
      if(keystatus[0xcb]){//left
         keystatus[0xcb]=0;
         if(m>2) m-=1;k=1;
      }
      if(keystatus[0xc9]){//pgup
         keystatus[0xc9]=0;
         n+=1;k=1;
      }
      if(keystatus[0xd1]){//pgdn
         keystatus[0xd1]=0;
         if(n>2) n-=1;k=1;
      }
      if(frm==0 || k) case=init(l,m,n,0.5);
   }
   d0=0;d1=0;d2=0;k=0;
   if(case==hyperbolic){
      mob(x,y,1,0,(0.5*xres-mousx)*0.0025,(mousy-0.5*yres)*0.0025);
      k=hypit(x,y);
      d1=abs(y);
      d2=abs(x*xnb+y*ynb);
      x-=xa;y-=ya;
      d0=abs(sqrt(x*x+y*y)-ra); 
   } else if(case==spherical){
      k=sphit(x,y);
      d1=abs(y);
      d2=abs(x*xnb+y*ynb);
      x-=xa;y-=ya;
      d0=abs(sqrt(x*x+y*y)-ra);
   } else {
      k=eucit(x,y);
      d1=abs(y);
      d2=abs(x*xnb+y*ynb);
      d0=abs(x*xna+y*yna+cna);
   }
   return k*(min(d0,min(d1,d2))^0.25);//4*k*(d0*d1*d2)^0.33;//
}
checker(rf0,rf1,rf2){
   //if((rf0+rf1+rf2)==0) return 10;//in order to show the fundamental triangle
   0.5+0.5*((1*rf0+1*rf1+1*rf2)%2)
}
hypit(&x,&y){
   ax=x+1;ay=y+1;
   rf0=0;rf1=0;rf2=0;i=0;
   for(i=0;i<mi && (ax!=x || ay!=y);i++){//if current iterate is inside the fundamental triagle we are done
      ax=x;ay=y;
      //1st fold
      y=abs(y);rf0+=y!=ay;
      //2nd fold
      t=2*min(0,x*xnb+y*ynb);rf1+=t<0;
      x-=t*xnb;y-=t*ynb;
      //3rd fold
      x-=xa; y-=ya;
      r2=x*x+y*y;
      k=max(ra*ra/r2,1);rf2+=k!=1;
      x*=k;y*=k;
      x+=xa; y+=ya;
   }
   checker(rf0,rf1,rf2)
}
sphit(&x,&y){
   ax=x+1;ay=y+1;
   rf0=0;rf1=0;rf2=0;
   for(i=0;i<mi && (ax!=x || ay!=y);i++){//if current iterate is inside the fundamental triagle we are done
      ax=x;ay=y;
      //1st fold
      y=abs(y);rf0+=y!=ay;
      //2nd fold
      t=2*min(0,x*xnb+y*ynb);rf1+=t<0;
      x-=t*xnb;y-=t*ynb;
      //3rd fold
      x-=xa; y-=ya;
      r2=x*x+y*y;
      k=min(ra*ra/r2,1);rf2+=k!=1;
      x*=k;y*=k;
      x+=xa; y+=ya;
   }
   checker(rf0,rf1,rf2)
}
eucit(&x,&y){
   ax=2*x+0.1;ay=2*y+0.1;
   rf0=0;rf1=0;rf2=0;
   for(i=0;i<mi && (ax!=x || ay!=y);i++){//if current iterate is inside the fundamental triagle we are done
      ax=x;ay=y;
      //1st fold
      y=abs(y);rf0+=y!=ay;
      //2nd fold
      t=2*min(0,x*xnb+y*ynb);rf1+=t<0;
      x-=t*xnb;y-=t*ynb;
      //3rd fold
      t=2*min(0,x*xna+y*yna+cna);rf2+=t<0;
      x-=t*xna;y-=t*yna;
   }
   checker(rf0,rf1,rf2)
}
init(l,m,n,lc){
   
   k=(m*n+l*n+l*m);
   case=euclidean;
   if(k<l*m*n) case=hyperbolic;
   else if(k>l*m*n) case=spherical;
   
   aa=pi/l;ab=pi/m;ac=pi/n;
   
   //parameters of the 2nd folding line
   xnb=sin(aa); ynb=-cos(aa);
   
   if(case==euclidean){//the 3rd fold is about a line
      bb1=0.5*pi-ab;
      xna=-sin(ab);yna=-cos(ab);
      cna=-lc*xna;
   } else {//the 3rd fold is about a circle instead
      if(case==hyperbolic){//scale lc in order to get a Poincare disc with radius 1
         lc=(cos(aa)*cos(ab)+cos(ac))/(sin(aa)*sin(ab));
         lc=sqrt((lc-1)/(lc+1));
      }else{
         lc=(cos(aa)*cos(ab)+cos(ac))/(sin(aa)*sin(ab));
         lc=sqrt((1-lc)/(1+lc));
      }
      
      lb=(cos(ab)+cos(aa+ac))*lc/(cos(aa+ab)+cos(ac));//length of b side of fundamental triangle
      ra=sin(aa)*lc/(cos(aa+ab)+cos(ac));//radius of the folding circle
      xa=lc+ra*sin(ab); ya=ra*cos(ab);//center of the folding circle
      if(case==spherical)ra=-ra;//because the center of the folding circle is in the opposit side wrt the hyperbolic case
   }
   
   return case;
}
mob(&x,&y,ax,ay,bx,by){//Mobius transform that keeps the unit circle invariant
   //xn=(x,y)*(ax,ay)+(bx,by)
   xn=x*ax-y*ay+bx; yn=x*ay+y*ax+by;
   xd=x*bx+y*by+ax; yd=-x*by+y*bx-ay;
   idn2=1/(xd*xd+yd*yd);
   //(x,y)=(xn,yn)*(xd,-yd)*idn2;
   x=(xn*xd+yn*yd)*idn2;
   y=(-xn*yd+yn*xd)*idn2;
}