/*
Penrose tilings.

 By Abdelaziz Nait Merzouk, october 2017, april 2018.
 
Use with evaldraw: http://advsys.net/ken/download.htm

 It uses "cut and project" technique:

 Given a "cutting" plane and a "projection" surface, for each pair of 
directions in 5D ((x,y), (x,z) ... etc), we scan the 3D hyperplanes that are perpendicular 
to the pair and which have offsets of N+0.5 (so for each N in the search range) then we compute 
the intersection of those 3D hyperplanes with the "cutting" surface. The
intersections give us the positions of the squares that, when projected 
back on the "projection" plane, become the tiles.

Here the cutting surface is a plane perturbed with perlin noise.

Controls:
Left mouse button + move mouse : pan.
Right mouse button + move mouse: zoom in/out.
keys [1] + mouse move: .
keys [2] + mouse move: Change the amount of the perturbation.
keys [3] + mouse move: Change the scale of the perlin noise.
keys [4] + mouse move: Changes the perlin noise.
key[w] or [z]: wireframe or filled facets.
[ctrl]+[enter]: reset. (actually evaldraw recompiles the script)
*/

//for zoom and pan
static cx=0,cy=0,cz=-10;
static fov=1;
static wireframe=1;
static rangeLimit=25;

//ffun params
// ffun() is the function that defines how the cutting surface
//deviates from the projection plane in adir direction.
// Other function for the two remaining directions perpendicular to
//the the projection plane can be defined. I'm trying to keep it simple.
// ffun() is a gaussian.   
static _mxs=0, _mys=0, _ms=1, _mr=2;
static _s=.1, _xs=0, _ys=0, _tr=0, _r=0.00;//actual used parameters

()
{
   static mx,my;
   static mc=0;
   if(numframes == 0) {Init(); mc=1;}
   
   {
      if (bstatus==1){
         readmouse(mx,my);
         cx +=(0.02*mx/fov);
         cy -=(0.02*my/fov);
         mc=1;
      } else if (bstatus==2){
         readmouse(mx,my);
         fov+=0.01*my*fov;
         mc=2;
      } else if(keystatus[0x02]){//"1"
         readmouse(mx,my,mz);
         _mxs+=mx;
         _mys+=my;
         mc=3;
      } else if(keystatus[0x03]){//"2"
         readmouse(mx,my,mz);
         _ms+=mx*0.01; 
         _ms = min(1,max(0,_ms));
         mc=3;
      } else if(keystatus[0x04]){//"3"
         readmouse(mx,my,mz); 
         _mr+=mx*0.01;
         _mr = max(_mr,0.1);
         mc=3;
      } else if(keystatus[0x05]){//"4"
         readmouse(mx,my,mz);
         _tr+=mx*0.001; 
         mc=3;
      } else {readmouse(mx,mx,mx);mc=0;}
   } 
   if(keystatus[0x2C])//"w" on an azerty keyboard. should be "z" on qwerty keyboards.
      {wireframe = (wireframe+1)%2; keystatus[0x2C]=0;mc=1;}
   if(keystatus[0x3C])
      {keystatus[0x3C]=0;mc=1;}
   if(keystatus[0x01])
      {keystatus[0x01]=0;mc=1;}
      
   
   S2P(_mxs+0.5*xres, _mys+0.5*yres, _xs, _ys);
   _r = 1/(_mr);
   _s = _ms*_mr*0.25;//0.3*_ms*_mr/(sqrt(2)*exp(-0.5));//we need to limit the amount of the perturbation in order to avoid overlapping tiles!
      
////////////////////////////////////////
   if(mc==0 && numframes != 0)return;      
   cls(0);
   clz(1e32);
   setcol(0xffffff);
   setcam(cx,cy,-cz,0,PI);
   setview(0,0,xres,yres,xres*0.5,yres*0.5,xres*0.5*fov);
   //glsettex("moebius0.png");
   glCullFace(GL_NONE);
   glDisable(GL_DEPTH_TEST);
////////////////////////////////////////      

   //compute the extent of the tiling with repect to screen area
   //we also move the "cutting" plane
   ScrExt();
   
#if 1
   //draw the tiling
   for(i=0;i<5;i++)
      for(j=i+1;j<5;j++)
         findSquares(i,j);
#else
   //Draw only the stripes "perpendicular" to direction i.
   i=0;
   for(j=0; j<5; j++) if(j!=i) findSquares(i,j);
#endif
}

drawcirc(x,y){
   drawsph(x,y,-20);
}

///////////////////////////////////////////////////////////////////////////////////
//initializations and parameters handling.
///////////////////////////////////////////////////////////////////////////////////
Init(){
   ang = 0; ofs=0*PI;
   t = sqrt(2/5);// Scaling factor in order to normalise the vectors

   for(i=0; i<5; i++){
      //"projection" plane
      udir[i] = t*cos(ang+ofs);
      vdir[i] = t*sin(ang+ofs);
      ang += 2 * PI / 5;
   }
   
   for(i=0;i<5;i++) {adir[i]=1/sqrt(5);}
   u2dir[0]=udir[0]; u2dir[1]=udir[2]; u2dir[2]=udir[1]; u2dir[3]=udir[1]; u2dir[4]=udir[2];
   v2dir[0]=vdir[0]; v2dir[1]=vdir[2]; v2dir[2]=-vdir[1]; v2dir[3]=vdir[1]; v2dir[4]=-vdir[2];

   for(i=0; i<5; i++)
      for(j=0; j<5; j++){
         k=1;//(j-i)%3; k = k *.5 + .1;
         colors[i][j][0]=(rnd+.2)*255*1.5*k;
         colors[i][j][1]=(rnd+.2)*255*1.5*k;
         colors[i][j][2]=(rnd+.2)*255*1.5*k;
      }
}

ScrExt(){
   //Compute the params for "projection" plane to "cut" plane projection (see funcion PP2CP() below)
   // dotUO, dotVO, dotUcu, dotUcv, dotVcu, dotVcv, iDdet;
   dotUO = 0;//DotP(udir, O);
   dotVO = 0;//DotP(vdir, O);
   dotUcu = DotP(udir, udir); dotUcv = DotP(udir, vdir);
   dotVcu = DotP(vdir, udir); dotVcv = DotP(vdir, vdir);
   iDdet = 1/(dotUcu * dotVcv - dotVcu * dotUcv);  

   //Compute extents of the tiling (from screen to 5D space)
   for(i=0; i<5; i++){
      extents[i][0] = 1e50;
      extents[i][1] = -(1e50);
   }
   ScrExtStep(0,0);
   ScrExtStep(xres,0);
   ScrExtStep(0,yres);
   ScrExtStep(xres,yres);
   
   for(i=0; i<5; i++){
      mean = floor((extents[i][0] + extents[i][1]) * 0.5);
      extents[i][0] = max(mean-rangeLimit, floor(extents[i][0]) - 1);
      extents[i][1] = min(mean+rangeLimit, floor(extents[i][1]) + 2);
   }
   return 1;
}

ScrExtStep(x0,y0){
   auto x,y;
   S2P(x0, y0, x, y);
   auto p[5];
   PP2CP(x,y,x,y);//from projection plane to cut plane
   CP2E5(x,y,p);  //from cut plane to E5
   for(i=0; i<5; i++){
      extents[i][0] = min(extents[i][0], p[i]);
      extents[i][1] = max(extents[i][1], p[i]);
   }
}

//not used
//verify if the tiles are not flipped and that the resulting tiling have no overlaps. This reduces to verify that the plane is inside the non negative grassmannian G+*(2,5). 
/*verifyCP(u[5],v[5]){
   for(i=0; i<5; i++){
      j=(i+1)%5;
      p=u[i]*v[j]-u[j]*v[i];
      if(p<0) return 0;
      j=(i+2)%5;
      p=u[i]*v[j]-u[j]*v[i];
      if(p<0) return 0;
   }
   return 1;
}*/

//not used
/*verify_and_normalize_uv(){//handle the orientation parameters.
   
   //normalize ccudir
   r=0;
   for(c=0;c<5;c++)
      r+=ccudir[c]*ccudir[c];
   r=1/sqrt(r);
   for(c=0;c<5;c++)
      ccudir[c]*=r;
   
   //make ccvdir perpendicular to ccudir
   d01=0;
   for(c=0;c<5;c++)
      d01+=ccudir[c]*ccvdir[c];
   for(c=0;c<5;c++)
      ccvdir[c] -= d01 * ccudir[c];
      
   //normalize ccvdir
   r=0;
   for(c=0;c<5;c++)
      r+=ccvdir[c]*ccvdir[c];
   r=1/sqrt(r);
   for(c=0;c<5;c++)
      ccvdir[c]*=r;
      
   //if the orientation of the cut plane is not valid restore to previous valid one.
   if(verifyCP(ccudir,ccvdir)==0) {
      for(c=0;c<5;c++){
         ccudir[c]=cudir[c];
         ccvdir[c]=cvdir[c];
      }
      return;
   }
   
   for(c=0;c<5;c++){
      cudir[c]=ccudir[c];
      cvdir[c]=ccvdir[c];
   }
}*/


///////////////////////////////////////////////////////////////////
//Given cut surface and projection plane, draw the tiling
//////////////////////////////////////////////////////////////////

static udir[5], vdir[5];//"Projection" plane parameters: u,v directions
static u2dir[5], v2dir[5], adir[5];//directions orthogonal to the projection plane

static dotUO, dotVO, dotUcu, dotUcv, dotVcu, dotVcv, iDdet; //precomputed

static extents[5][2];// Used for finding the extents of the tiling w.r.t. screen area 
static colors[5][5][3];//Only 10 colors are actually used

// Finds and draw the squares living in 5D space that when projected in the
//"projection" direction gives the rhombs of the tiling
findSquares(i0,i1){
   auto p[5];
   //scan the 3D hyperplanes perpendicular to directions i0 and i1
   //then find their intersections with the "cutting" surface
   for(O0 = extents[i0][0]; O0<extents[i0][1]; O0+=1)
      for(O1 = extents[i1][0]; O1<extents[i1][1]; O1+=1){
         intersect(i0,O0,i1,O1,p);
         drawSquare(i0,i1,p);
   }
}

//Draws the tiles (which are squares in 5D space)
drawSquare(i0,i1,p[5]){
   auto z[2][2][2];
   for(i=0;i<2;i++)
      for(j=0;j<2;j++){
         z[i][j][0]=0; z[i][j][1]=0;
         for(k=0;k<5;k++){
            z[i][j][0] += (p[k]+(k==i0)*i+(k==i1)*j)*udir[k];
            z[i][j][1] += (p[k]+(k==i0)*i+(k==i1)*j)*vdir[k];
         }
      }
   setcol(colors[i0][i1][0], colors[i0][i1][1], colors[i0][i1][2]);
   //setcol(colors[i0][i1][0], colors[i0][i1][0], colors[i0][i1][0]);

   if(wireframe){
      moveto(z[0][0][0],z[0][0][1],0);
      lineto(z[1][0][0],z[1][0][1],0);
      lineto(z[1][1][0],z[1][1][1],0);
      lineto(z[0][1][0],z[0][1][1],0);
      lineto(z[0][0][0],z[0][0][1],0);
   } else {
   glBegin(GL_QUADS);
      glVertex(z[0][0][0],z[0][0][1],0);
      glVertex(z[1][0][0],z[1][0][1],0);
      glVertex(z[1][1][0],z[1][1][1],0);
      glVertex(z[0][1][0],z[0][1][1],0);
   glEnd();
   }
}

// Given a pair of directions (in 5D space) and offsets,
//find the intersection with the "dual" of the pair.
//p is the output -> the square found
//this one not used. It is for the case where the cutting surface is a plane
/*intersect(i0,O0,i1,O1,p[5]){
   auto u,v;
   x0=O0-O[i0]+0.5;
   x1=O1-O[i1]+0.5;
   idet = 1/(cudir[i0] * cvdir[i1] - cudir[i1] * cvdir[i0]);
   u = idet * (cvdir[i1] * x0 - cvdir[i0] * x1);
   v = idet * (cudir[i0] * x1 - cudir[i1] * x0);
   CP2E5(u,v,p);
   for(i=0;i<5;i++){
      if(i == i0 || i==i1) continue;
      p[i] = floor(p[i] + 0.5);
   }
   p[i0]=O0; p[i1]=O1;
}*/


// Deviation of the cutting surface from the projection plane
//in the adir direction and its derivatives. It is a gaussian here.
//It can be any smooth function. Keep in mind that it's slope
//must be bounded in order to avoid "bad" tilings where the tiles ovelap.
ffun(x,y){_s * (0.5*noise(x*_r,y*_r,_tr) + 0.25*noise(x*2*_r,y*2*_r,_tr))}
dfdx(x,y){ 0}
dfdy(x,y){ 0}

//Give the linear system to solve based on
//  - the (i,j) 3-hyperplane
//  - the given position (x,y)
// Output:
//  - position on surface restricted to i,j coordinates
//  - matrix of the tangent plane restricted to i,j
CSurf(i, j, x, y, pos[2], m[2][2]){
   //for simplicity we use only one perpendicular direction: adir
   //we can add dierction u2dir and v2dir later
   
   f = ffun(x,y);//the foo
   fx= dfdx(x,y);                // its derivative w.r.t x
   fy= dfdy(x,y);                // its derivative w.r.t y
   
   pos[0] = x * udir[i] + y * vdir[i] + f * adir[i];
   pos[1] = x * udir[j] + y * vdir[j] + f * adir[j];
   
   m[0][0]= udir[i] + fx * adir[i]; m[0][1]= vdir[i] + fy * adir[i];
   m[1][0]= udir[j] + fx * adir[j]; m[1][1]= vdir[j] + fy * adir[j];
}

// Given a pair of directions (in 5D space) and offsets,
//find the intersection with the "dual" of the pair.
//p is the output -> the position of the square found
intersect(i0,O0,i1,O1,p[5]){
   auto u,v;
   auto pos[2];
   auto m[2][2];
   //initial gess
   u=0; v=0;
   //use Newton Raphson to find the intersection
   for(iter=0; iter<25; iter++){
      CSurf(i0, i1, u, v, pos, m);
      x0=O0-pos[0]+0.5;
      x1=O1-pos[1]+0.5;
      idet = 1/(m[0][0] * m[1][1] - m[0][1] * m[1][0]);
      du = idet * (m[1][1] * x0 - m[0][1] * x1);
      dv = idet * (m[0][0] * x1 - m[1][0] * x0);
      u+=du; v+=dv;
      if(max(abs(u),abs(v)) < 1e-15) break;
   }
   
   //Get the intersection point in the 5D space from (u,v)
   CP2E5(u,v,p);
   
   for(i=0;i<5;i++){
      if(i == i0 || i==i1) continue;
      p[i] = floor(p[i] + 0.5);
   }
   p[i0]=O0; p[i1]=O1;
}

//////////////////////////////////////////////////////////////////////////
//Utils///////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
clamp(x,a,b){min(b,max(a,x))}

//Gives the coordinates of the point (x,y) on the "cutting" surface into the 5D space
CP2E5(x,y,p[5]){
   for(i=0; i<5; i++)
      p[i] = adir[i]*ffun(x,y) + x * udir[i] + y * vdir[i];
}

//Gives the coordinates of the point (x,y) on the "projection" plane into the 5D space
PP2E5(x,y,p[5]){
   for(i=0; i<5; i++)
      p[i] = x * udir[i] + y * vdir[i];
}

//Gives the coordinates of the point p in 5D space onto the "projection"
//not used
/*E52PP(p[5],&u,&v){
   u = DotP(udir, p);
   v = DotP(vdir, p);
}*/

//Project point p:(u,v) in "projection" plane onto point q:(a,b) in "cut" plane
//The projection is perpendicular to the "projection" plane
PP2CP(u,v,&a,&b){
   u-= dotUO; v-= dotVO;
   a = iDdet * (dotVcv * u - dotUcv * v);
   b = iDdet * (dotUcu * v - dotVcu * u);
}

//Dot product
DotP(p0[5], p1[5]){
   val=0;
   for(i=0; i<5; i++)
      val += p0[i] * p1[i];
   return val;
}

//Rotate pin in the plane (pin,pinv) by angle a (ca=cos(a); sa=sin(a))
//not used
/*Rotate2(pin[5], pinv[5], a, pout[5]){
   ca=cos(a); sa=sin(a);
   for(i=0; i<5; i++) 
      pout[i]=pin[i]*ca+pinv[i]*sa;
}

Rotate(pin[5],p0[5], p1[5], a, pout[5]){
   ca=cos(a); sa=sin(a);
   x = DotP(pin,p0); y = DotP(pin,p1);
   x1 =  ca * x + sa * y;
   y1 = -sa * x + ca * y;
   for(i=0; i<5; i++) 
      pout[i]=pin[i]+p0[i]*(x1-x)+p1[i]*(y1-y);
}*/
//-----------------------------------------------------

//screen coordinates to plane coordinates
S2P(xs, ys, &xp, &yp){
   xp = -(xs-xres*0.5)*cz/(xres*0.5*fov)+cx;
   yp = (ys-yres*0.5)*cz/(xres*0.5*fov)+cy;
}

//plane coordinates to screen coordinates
P2S(xp, yp, &xs, &ys){
   xs = xres*0.5-(xp-cx)*(xres*0.5*fov)/cz ;
   ys = yres*0.5+(yp-cy)*(xres*0.5*fov)/cz ;
}

drawGrid(){
// dessiner le fond
   cov=20/fov/xres;   
   setcol(0xffffff);
   moveto(-100,0,0);lineto(100,0,0);
   moveto(0,-100,0);lineto(0,100,0);
   col=0.005/cov;if(col>1) col=1;col*=255;
   setcol(col,col,col);
   for (i=-100;i<=100;i+=1){
      moveto(-100,i,0);lineto(100,i,0);
   }
   for (i=-100;i<=100;i+=1){
      moveto(i,-100,0);lineto(i,100,0);
   }
}
drawSE(){
   setcol(0xff0000);
   auto x,y;
   S2P(10, 10, x, y);moveto(x,y,0);
   S2P(xres-10, 10, x, y);lineto(x,y,0);
   S2P(xres-10, yres-10, x, y);lineto(x,y,0);
   S2P(10, yres-10, x, y);lineto(x,y,0);
   S2P(10, 10, x, y);lineto(x,y,0);
}