/*
Penrose tilings.

 By Abdelaziz Nait Merzouk, october 2017, february 2018.
 
Use with evaldraw: http://advsys.net/ken/download.htm

 It uses "cut and project" technique:

 Given a "cutting" plane and a "projection" plane, for each pair of 
directions in 5D ((x,y), (x,z) ... etc), we scan the 3D hyperplanes that are perpendicular 
to the pair and which have offsets of N+0.5 (so for each N in the search range) then we compute 
the intersection of those 3D hyperplanes with the "cutting" plane. The
intersections give us the positions of the squares that, when projected 
back on the "projection" plane, become the tiles.

Controls:
Left mouse button + move mouse : translate.
Right mouse button + move mouse: zoom in/out.
Press keys [1] to [0] + mouse move: Change the orientation of the cut plane.(The actual number of DoF is 6 but it is easier that way. The program verify that the orientation of the cut plane is acceptable, that is, the tiles don't overlap).
Press keys [y] to [p] + mouse move: Change the offset of the cut plane.(The actual number of DoF is 3)
key[w] or [z]: wireframe or filled facets.
[ctrl]+[enter]: reset. (actually evaldraw recompiles the script)
*/

static cx=0,cy=0,cz=-10;
static fov=1;
static wireframe=1;
static rangeLimit=15;

//"cutting" plane parameters: u,v directions and Origin
static cudir[5], cvdir[5], O[5];
static ccudir[5], ccvdir[5], cO[5];

()
{
   static mx,my;
   static mc=0;
   if(numframes == 0) {Init(); mc=1;}
   
   {
      if (bstatus==1){
         readmouse(mx,my);
         cx +=(0.02*mx/fov);
         cy -=(0.02*my/fov);
         mc=1;
      } else if (bstatus==2){
         readmouse(mx,my);
         fov+=0.01*my*fov;
         mc=2;
      } else if(keystatus[0x02]){//"1"
         readmouse(mx,my,mz);
         ccudir[0]+=mx*0.01;
         mc=3;
      } else if(keystatus[0x03]){//"2"
         readmouse(mx,my,mz);
         ccudir[1]+=mx*0.01; 
         mc=3;
      } else if(keystatus[0x04]){//"3"
         readmouse(mx,my,mz); 
         ccudir[2]+=mx*0.01;
         mc=3;
      } else if(keystatus[0x05]){//"4"
         readmouse(mx,my,mz);
         ccudir[3]+=mx*0.01; 
         mc=3;
      } else if(keystatus[0x06]){//"5"
         readmouse(mx,my,mz);
         ccudir[4]+=mx*0.01;
         mc=3;
      } else if(keystatus[0x07]){//"6"
         readmouse(mx,my,mz);
         ccvdir[0]+=mx*0.01; 
         mc=3;
      } else if(keystatus[0x08]){//"7"
         readmouse(mx,my,mz);
         ccvdir[1]+=mx*0.01; 
         mc=3;
      } else if(keystatus[0x09]){//"8"
         readmouse(mx,my,mz);
         ccvdir[2]+=mx*0.01; 
         mc=3;
      } else if(keystatus[0x0a]){//"9"
         readmouse(mx,my,mz);
         ccvdir[3]+=mx*0.01; 
         mc=3;
      } else if(keystatus[0x0b]){//"0"
         readmouse(mx,my,mz);
         ccvdir[4]+=mx*0.01;
         mc=3;
      } else if(keystatus[0x15]){//"y"
         readmouse(mx,my,mz);
         O[0]+=mx*0.01;
         mc=3;
      } else if(keystatus[0x16]){//"u"
         readmouse(mx,my,mz);
         O[1]+=mx*0.01;
         mc=3;
      } else if(keystatus[0x17]){//"i"
         readmouse(mx,my,mz);
         O[2]+=mx*0.01;
         mc=3;
      } else if(keystatus[0x18]){//"o"
         readmouse(mx,my,mz);
         O[3]+=mx*0.01;
         mc=3;
      } else if(keystatus[0x19]){//"p"
         readmouse(mx,my,mz);
         O[4]+=mx*0.01;
         mc=3;
      }else {readmouse(mx,mx,mx);mc=0;}
   } 
   if(keystatus[0x2C])//"w" on an azerty keyboard. should be "z" on qwerty keyboards.
      {wireframe = (wireframe+1)%2; keystatus[0x2C]=0;mc=1;}
   if(keystatus[0x3C])
      {keystatus[0x3C]=0;mc=1;}
   if(keystatus[0x01])
      {keystatus[0x01]=0;mc=1;}
      
   verify_and_normalize_uv();
      
////////////////////////////////////////
   if(mc==0 && numframes != 0)return;      
   cls(0);
   clz(1e32);
   setcol(0xffffff);
   setcam(cx,cy,-cz,0,PI);
   setview(0,0,xres,yres,xres*0.5,yres*0.5,xres*0.5*fov);
   //glsettex("moebius0.png");
   glCullFace(GL_NONE);
   glDisable(GL_DEPTH_TEST);
////////////////////////////////////////      

   //compute the extent of the tiling with repect to screen area
   //we also move the "cutting" plane
   ScrExt();
   
#if 1
   //draw the tiling
   for(i=0;i<5;i++)
      for(j=i+1;j<5;j++)
         findSquares(i,j);
#else
   //Draw only the stripes "perpendicular" to direction i.
   i=0;
   for(j=0; j<5; j++) if(j!=i) findSquares(i,j);
#endif

   //setcol(250,100,50);
   //drawLines();
}

///////////////////////////////////////////////////////////////////////////////////
//initializations and parameters handling.
///////////////////////////////////////////////////////////////////////////////////
Init(){
   ang = 0; ofs=0*PI;
   t = sqrt(2/5);// Scaling factor in order to normalise the vectors

   for(i=0; i<5; i++){
      //"projection" plane
      udir[i] = t*cos(ang+ofs);
      vdir[i] = t*sin(ang+ofs);
      ang += 2 * PI / 5;
      
      //"cutting" plane
      cudir[i] = udir[i];
      cvdir[i] = vdir[i];
      
      ccudir[i] = cudir[i];
      ccvdir[i] = cvdir[i];
      
      O[i] = 0; cO[i]=0;
   }
   
   for(i=0;i<5;i++) {u1dir[i]=udir[i]; v1dir[i]=vdir[i]; adir[i]=1/sqrt(5);}
   u2dir[0]=udir[0]; u2dir[1]=udir[2]; u2dir[2]=udir[1]; u2dir[3]=udir[1]; u2dir[4]=udir[2];
   v2dir[0]=vdir[0]; v2dir[1]=vdir[2]; v2dir[2]=-vdir[1]; v2dir[3]=vdir[1]; v2dir[4]=-vdir[2];

   for(i=0; i<5; i++)
      for(j=0; j<5; j++){
         k=1;//(j-i)%3; k = k *.5 + .1;
         colors[i][j][0]=(rnd+.2)*255*1.5*k;
         colors[i][j][1]=(rnd+.2)*255*1.5*k;
         colors[i][j][2]=(rnd+.2)*255*1.5*k;
      }
}

ScrExt(){
   //Compute the params for "projection" plane to "cut" plane projection (see funcion PP2CP() below)
   // dotUO, dotVO, dotUcu, dotUcv, dotVcu, dotVcv, iDdet;
   dotUO = DotP(udir, O); dotVO = DotP(vdir, O);
   dotUcu = DotP(udir, cudir); dotUcv = DotP(udir, cvdir);
   dotVcu = DotP(vdir, cudir); dotVcv = DotP(vdir, cvdir);
   iDdet = 1/(dotUcu * dotVcv - dotVcu * dotUcv);  

   //Compute extents of the tiling (from screen to 5D space)
   for(i=0; i<5; i++){
      extents[i][0] = 1e50;
      extents[i][1] = -(1e50);
   }
   ScrExtStep(0,0);
   ScrExtStep(xres,0);
   ScrExtStep(0,yres);
   ScrExtStep(xres,yres);
   
   for(i=0; i<5; i++){
      mean = floor((extents[i][0] + extents[i][1]) * 0.5);
      extents[i][0] = max(mean-rangeLimit, floor(extents[i][0]) - 1);
      extents[i][1] = min(mean+rangeLimit, floor(extents[i][1]) + 2);
   }
   return 1;
}

ScrExtStep(x0,y0){
   auto x,y;
   S2P(x0, y0, x, y);
   auto p[5];
   PP2CP(x,y,x,y);//from projection plane to cut plane
   CP2E5(x,y,p);  //from cut plane to E5
   for(i=0; i<5; i++){
      extents[i][0] = min(extents[i][0], p[i]);
      extents[i][1] = max(extents[i][1], p[i]);
   }
}

verifyCP(u[5],v[5]){//verify if the tiles are not flipped and that the resulting tiling have no overlaps. This reduces to verify that the plane is inside the non negative grassmannian G+*(2,5). 
   for(i=0; i<5; i++){
      j=(i+1)%5;
      p=u[i]*v[j]-u[j]*v[i];
      if(p<0) return 0;
      j=(i+2)%5;
      p=u[i]*v[j]-u[j]*v[i];
      if(p<0) return 0;
   }
   return 1;
}

verify_and_normalize_uv(){//handle the orientation parameters.
   
   //normalize ccudir
   r=0;
   for(c=0;c<5;c++)
      r+=ccudir[c]*ccudir[c];
   r=1/sqrt(r);
   for(c=0;c<5;c++)
      ccudir[c]*=r;
   
   //make ccvdir perpendicular to ccudir
   d01=0;
   for(c=0;c<5;c++)
      d01+=ccudir[c]*ccvdir[c];
   for(c=0;c<5;c++)
      ccvdir[c] -= d01 * ccudir[c];
      
   //normalize ccvdir
   r=0;
   for(c=0;c<5;c++)
      r+=ccvdir[c]*ccvdir[c];
   r=1/sqrt(r);
   for(c=0;c<5;c++)
      ccvdir[c]*=r;
      
   //if the orientation of the cut plane is not valid restore to previous valid one.
   if(verifyCP(ccudir,ccvdir)==0) {
      for(c=0;c<5;c++){
         ccudir[c]=cudir[c];
         ccvdir[c]=cvdir[c];
      }
      return;
   }
   
   for(c=0;c<5;c++){
      cudir[c]=ccudir[c];
      cvdir[c]=ccvdir[c];
   }
}

///////////////////////////////////////////////////////////////////
//Given cut and projection planes, draw the tiling
//////////////////////////////////////////////////////////////////
static udir[5], vdir[5];//"Projection" plane parameters: u,v directions
static u1dir[5], v1dir[5];//directions orthogonal to the projection plane
static u2dir[5], v2dir[5], adir[5];//directions orthogonal to the projection plane

static dotUO, dotVO, dotUcu, dotUcv, dotVcu, dotVcv, iDdet; //precomputed

static extents[5][2];// Used for finding the extents of the tiling w.r.t. screen area 
static colors[5][5][3];//Only 10 colors are actually used

// Finds and draw the squares living in 5D space that when projected on the
//"cutting" plane gives the rhombs of the tiling
findSquares(i0,i1){
   auto p[5];
   //scan the 3D hyperplanes perpendicular to directions i0 and i1
   //then find their intersections with the "cutting" plane
   for(O0 = extents[i0][0]; O0<extents[i0][1]; O0+=1)
      for(O1 = extents[i1][0]; O1<extents[i1][1]; O1+=1){
         intersect(i0,O0,i1,O1,p);
         drawSquare(i0,i1,p);
   }
}

//Draws the tiles (which are squares in 5D space)
drawSquare(i0,i1,p[5]){
   auto z[2][2][2];
   for(i=0;i<2;i++)
      for(j=0;j<2;j++){
         z[i][j][0]=0; z[i][j][1]=0;
         for(k=0;k<5;k++){
            z[i][j][0] += (p[k]+(k==i0)*i+(k==i1)*j)*udir[k];
            z[i][j][1] += (p[k]+(k==i0)*i+(k==i1)*j)*vdir[k];
         }
      }
   setcol(colors[i0][i1][0], colors[i0][i1][1], colors[i0][i1][2]);
   //setcol(colors[i0][i1][0], colors[i0][i1][0], colors[i0][i1][0]);

   if(wireframe){
      moveto(z[0][0][0],z[0][0][1],0);
      lineto(z[1][0][0],z[1][0][1],0);
      lineto(z[1][1][0],z[1][1][1],0);
      lineto(z[0][1][0],z[0][1][1],0);
      lineto(z[0][0][0],z[0][0][1],0);
   } else {
   glBegin(GL_QUADS);
      glVertex(z[0][0][0],z[0][0][1],0);
      glVertex(z[1][0][0],z[1][0][1],0);
      glVertex(z[1][1][0],z[1][1][1],0);
      glVertex(z[0][1][0],z[0][1][1],0);
   glEnd();
   }
}

// Given a pair of directions (in 5D space) and offsets,
//find the intersection with the "dual" of the pair.
//p is the output -> the square found
intersect(i0,O0,i1,O1,p[5]){
   auto u,v;
   x0=O0-O[i0]+0.5;
   x1=O1-O[i1]+0.5;
   idet = 1/(cudir[i0] * cvdir[i1] - cudir[i1] * cvdir[i0]);
   u = idet * (cvdir[i1] * x0 - cvdir[i0] * x1);
   v = idet * (cudir[i0] * x1 - cudir[i1] * x0);
   CP2E5(u,v,p);
   for(i=0;i<5;i++){
      if(i == i0 || i==i1) continue;
      p[i] = floor(p[i] + 0.5);
   }
   p[i0]=O0; p[i1]=O1;
}

//Utils///////////////////////////////////////////////////////////////////
clamp(x,a,b){min(b,max(a,x))}

//Gives the coordinates of the point (x,y) on the "cutting" plane into the 5D space
CP2E5(x,y,p[5]){
   for(i=0; i<5; i++)
      p[i] = O[i] + x * cudir[i] + y * cvdir[i];
}

//Gives the coordinates of the point (x,y) on the "projection" plane into the 5D space
PP2E5(x,y,p[5]){
   for(i=0; i<5; i++)
      p[i] = x * udir[i] + y * vdir[i];
}

//Gives the coordinates of the point p in 5D space onto the "projection"
E52PP(p[5],&u,&v){
   u = DotP(udir, p);
   v = DotP(vdir, p);
}

//Project point p:(u,v) in "projection" plane onto point q:(a,b) in "cut" plane
//The projection is perpendicular to the "projection" plane
PP2CP(u,v,&a,&b){
   u-= dotUO; v-= dotVO;
   a = iDdet * (dotVcv * u - dotUcv * v);
   b = iDdet * (dotUcu * v - dotVcu * u);
}

//Dot product
DotP(p0[5], p1[5]){
   val=0;
   for(i=0; i<5; i++)
      val += p0[i] * p1[i];
   return val;
}

//Rotate pin in the plane (pin,pinv) by angle a (ca=cos(a); sa=sin(a))
Rotate2(pin[5], pinv[5], a, pout[5]){
   ca=cos(a); sa=sin(a);
   for(i=0; i<5; i++) 
      pout[i]=pin[i]*ca+pinv[i]*sa;
}

Rotate(pin[5],p0[5], p1[5], a, pout[5]){
   ca=cos(a); sa=sin(a);
   x = DotP(pin,p0); y = DotP(pin,p1);
   x1 =  ca * x + sa * y;
   y1 = -sa * x + ca * y;
   for(i=0; i<5; i++) 
      pout[i]=pin[i]+p0[i]*(x1-x)+p1[i]*(y1-y);
}
//-----------------------------------------------------

//screen coordinates to plane coordinates
S2P(xs, ys, &xp, &yp){
   xp = -(xs-xres*0.5)*cz/(xres*0.5*fov)+cx;
   yp = (ys-yres*0.5)*cz/(xres*0.5*fov)+cy;
}

//plane coordinates to screen coordinates
P2S(xp, yp, &xs, &ys){
   xs = xres*0.5-(xp-cx)*(xres*0.5*fov)/cz ;
   ys = yres*0.5+(yp-cy)*(xres*0.5*fov)/cz ;
}

drawGrid(){
// dessiner le fond
   cov=20/fov/xres;   
   setcol(0xffffff);
   moveto(-100,0,0);lineto(100,0,0);
   moveto(0,-100,0);lineto(0,100,0);
   col=0.005/cov;if(col>1) col=1;col*=255;
   setcol(col,col,col);
   for (i=-100;i<=100;i+=1){
      moveto(-100,i,0);lineto(100,i,0);
   }
   for (i=-100;i<=100;i+=1){
      moveto(i,-100,0);lineto(i,100,0);
   }
}
drawSE(){
   setcol(0xff0000);
   auto x,y;
   S2P(10, 10, x, y);moveto(x,y,0);
   S2P(xres-10, 10, x, y);lineto(x,y,0);
   S2P(xres-10, yres-10, x, y);lineto(x,y,0);
   S2P(10, yres-10, x, y);lineto(x,y,0);
   S2P(10, 10, x, y);lineto(x,y,0);
}