enum {nbrpt=1000, nbrlinks=6}
#define DIST_CUTOFF 10
#define DIST_CUTOFF2 DIST_CUTOFF*DIST_CUTOFF
#define DIST_CUTON 5000
#define DIST_CUTON2 DIST_CUTON*DIST_CUTON
static p[nbrpt][2+nbrlinks];
()
{
   
   for(i=0;i<nbrpt;i++){
      p[i][0]=rnd*xres;
      p[i][1]=rnd*yres;//100+100*sin(0.05*p[i][0]);//
      for(j=0; j<nbrlinks; j++) p[i][j+2]=-1;//Init links to invalid value
   }
   //ranomise links
   for(i=0;i<nbrpt;i++){
      for (j=0; j<nbrlinks; j++){
         l=-1;
         do{
            l=floor(rnd*nbrpt);
         } while (veriflink(l,i)==0);
         p[i][j+2]=l;
      }
   }
  
   cls(0);
   while(1){
      //update vetices
      if(1) for(i=0;i<nbrpt;i++){
         p[i][0]+=(rnd-0.5)*4; p[i][0]=min(xres,max(0,p[i][0]));
         p[i][1]+=(rnd-0.5)*4; p[i][1]=min(yres,max(0,p[i][1]));
      }

      //update segs
      for(k=0;k<1;k++)
      for(i=0;i<nbrpt;i++){
      for(j=2;j<nbrlinks+2;j++){
         if(rnd>.5){//random update
            v=p[i][j];
            cl2=sqrt((p[i][0]-p[v][0])^2+(p[i][1]-p[v][1])^2);//current length
            //l=-1;
            //do l=floor(rnd*nbrpt); while (veriflink(l,i)==0);
            l=floor(rnd*nbrpt); if(veriflink(l,i)==0) continue;
            nl2=sqrt((p[i][0]-p[l][0])^2+(p[i][1]-p[l][1])^2);//new length
            pr=1*fdist(cl2)/fdist(nl2);//transition probability
            if(pr<rnd){//use new neighbour
               p[i][j]=l;
            }
         } else {//neighbour of neighbour based update
            v=p[i][j];
            cl2=sqrt((p[i][0]-p[v][0])^2+(p[i][1]-p[v][1])^2);//current length            
            //Choose neighbour's neighbour
            //l=-1;
            //do l=p[v][floor(rnd*nbrlinks)+2]; while (veriflink(l,i)==0);
            l=p[v][floor(rnd*nbrlinks)+2]; if(veriflink(l,i)==0) continue;
            nl2=sqrt((p[i][0]-p[l][0])^2+(p[i][1]-p[l][1])^2);//new length
            //apply change
            pr=1*fdist(cl2)/fdist(nl2);//transition probability
            if(pr<rnd){//use new neighbour
               p[i][j]=l;
            }
         }
      }
      }
      
      //draw them
      cls(0);
      setcol(255,0,0);ndseg=0;
      for(i=0;i<nbrpt;i++){
         for (j=0; j<nbrlinks; j++){
            v=p[i][j+2];
            cl2=(p[i][0]-p[v][0])^2+(p[i][1]-p[v][1])^2;
            if(cl2>mousx*mousx) continue;
            moveto(p[i][0],p[i][1]);
            lineto(p[v][0],p[v][1]);
            ndseg++;
         }
      }
      setcol(255,255,255);
      for(i=0;i<nbrpt;i++){
         //setpix(p[i][0],p[i][1]);
         drawsph(p[i][0],p[i][1],-0.2*DIST_CUTOFF);
      }
      moveto(10,10); printnum(ndseg);
      refresh();
   }
}
fdist(l){
   l=min(DIST_CUTON,max(DIST_CUTOFF,l));
   r=1/l-1/DIST_CUTON;
   r^3;
}
veriflink(l,j){
   r=1;
   if(l==j) return 0;
   for(i=0; i<nbrlinks; i++){
      if(p[j][2+i]==l){ r=0; break;}
   }
   return r;
}